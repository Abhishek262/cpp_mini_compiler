Terminals unused in grammar

    T_keyword
    T_return
    T_InputStream
    T_OutputStream
    T_RelationalOperator
    T_LogicalOperator
    T_UnaryOperator
    T_character
    T_whiteSpace
    T_break
    T_struct
    T_class
    T_namespace
    T_array
    T_caseop
    T_include
    T_comma
    T_dot
    T_float
    T_double
    T_long
    T_intVal
    T_longVal
    T_doubleVal
    T_floatVal
    T_bool
    T_bool_true
    T_bool_false


State 112 conflicts: 1 shift/reduce
State 121 conflicts: 1 shift/reduce
State 168 conflicts: 1 shift/reduce


Grammar

    0 $accept: Start $end

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis openflower block_end_flower

    2 block_end_flower: stmt Multiple_stmts
    3                 | closeflower

    4 block: openflower block_end_flower
    5      | stmt
    6      | T_Semicolon

    7 Multiple_stmts: stmt Multiple_stmts
    8               | closeflower

    9 stmt: expr T_Semicolon
   10     | if_stmt
   11     | switch_stmt
   12     | while_stmt
   13     | for_stmt
   14     | Assignment_stmt T_Semicolon
   15     | error T_Semicolon

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

   17 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block

   18 switch_stmt: T_switch T_openParenthesis expr_without_constants T_closedParanthesis switch_block

   19 switch_block_end_flower: case_stmt closeflower
   20                        | closeflower

   21 switch_block: openflower switch_block_end_flower
   22             | case_stmt
   23             | T_Semicolon

   24 case_stmt: T_case expr T_colon Multiple_stmts case_stmt
   25          | T_default T_colon Multiple_stmts case_stmt
   26          | %empty

   27 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty

   28 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   29                  | T_else Multiple_stmts_not_if
   30                  | T_else openflower block_end_flower
   31                  | %empty

   32 Multiple_stmts_not_if: stmt_without_if Multiple_stmts
   33                      | T_Semicolon

   34 stmt_without_if: expr T_Semicolon
   35                | Assignment_stmt T_Semicolon
   36                | while_stmt
   37                | for_stmt

   38 Assignment_stmt: T_identifier T_AssignmentOperator expr
   39                | T_identifier T_shortHand expr
   40                | T_type T_identifier T_AssignmentOperator expr_without_constants
   41                | T_type T_identifier T_AssignmentOperator T_stringLiteral
   42                | T_type T_identifier T_AssignmentOperator T_numericConstants
   43                | T_int T_identifier T_AssignmentOperator expr_without_constants
   44                | T_int T_identifier T_AssignmentOperator T_numericConstants

   45 expr_or_empty_with_semicolon_and_assignment: expr_or_empty T_Semicolon
   46                                            | Assignment_stmt T_Semicolon

   47 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty T_closedParanthesis
   48                                                | Assignment_stmt T_closedParanthesis

   49 expr_without_constants: T_identifier
   50                       | expr T_plus expr
   51                       | expr T_minus expr
   52                       | expr T_divide expr
   53                       | expr T_multiply expr
   54                       | expr T_mod expr
   55                       | expr T_LogicalAnd expr
   56                       | expr T_LogicalOr expr
   57                       | expr T_less expr
   58                       | expr T_less_equal expr
   59                       | expr T_greater expr
   60                       | expr T_greater_equal expr
   61                       | expr T_equal_equal expr
   62                       | expr T_not_equal expr

   63 expr: T_numericConstants
   64     | T_stringLiteral
   65     | T_identifier
   66     | expr T_plus expr
   67     | expr T_minus expr
   68     | expr T_divide expr
   69     | expr T_multiply expr
   70     | expr T_mod expr
   71     | expr T_LogicalAnd expr
   72     | expr T_LogicalOr expr
   73     | expr T_less expr
   74     | expr T_less_equal expr
   75     | expr T_greater expr
   76     | expr T_greater_equal expr
   77     | expr T_equal_equal expr
   78     | expr T_not_equal expr

   79 expr_or_empty: expr
   80              | %empty

   81 openflower: T_openFlowerBracket

   82 closeflower: T_closedFlowerBracket


Terminals, with rules where they appear

    $end (0) 0
    error (256) 15
    T_keyword <s> (258)
    T_int <s> (259) 43 44
    T_main <s> (260) 1
    T_type <s> (261) 1 40 41 42
    T_return <s> (262)
    T_for <s> (263) 16
    T_if <s> (264) 27 28
    T_else <s> (265) 28 29 30
    T_while <s> (266) 17
    T_InputStream <s> (267)
    T_OutputStream <s> (268)
    T_openParenthesis <s> (269) 1 16 17 18 27 28
    T_closedParanthesis <s> (270) 1 17 18 27 28 47 48
    T_openFlowerBracket <s> (271) 81
    T_closedFlowerBracket <s> (272) 82
    T_RelationalOperator <s> (273)
    T_LogicalOperator <s> (274)
    T_UnaryOperator <s> (275)
    T_AssignmentOperator <s> (276) 38 40 41 42 43 44
    T_Semicolon <s> (277) 6 9 14 15 23 33 34 35 45 46
    T_identifier <s> (278) 38 39 40 41 42 43 44 49 65
    T_numericConstants <s> (279) 42 44 63
    T_stringLiteral <s> (280) 41 64
    T_character <s> (281)
    T_plus <s> (282) 50 66
    T_minus <s> (283) 51 67
    T_mod <s> (284) 54 70
    T_divide <s> (285) 52 68
    T_multiply <s> (286) 53 69
    T_whiteSpace <s> (287)
    T_shortHand <s> (288) 39
    T_switch <s> (289) 18
    T_case <s> (290) 24
    T_break <s> (291)
    T_default <s> (292) 25
    T_struct <s> (293)
    T_class <s> (294)
    T_namespace <s> (295)
    T_array <s> (296)
    T_caseop <s> (297)
    T_include <s> (298)
    T_comma <s> (299)
    T_dot <s> (300)
    T_colon <s> (301) 24 25
    T_float <s> (302)
    T_double <s> (303)
    T_long <s> (304)
    T_intVal <s> (305)
    T_longVal <s> (306)
    T_doubleVal <s> (307)
    T_floatVal <s> (308)
    T_bool <s> (309)
    T_bool_true <s> (310)
    T_bool_false <s> (311)
    T_LogicalAnd (312) 55 71
    T_LogicalOr (313) 56 72
    T_less (314) 57 73
    T_less_equal (315) 58 74
    T_greater (316) 59 75
    T_greater_equal (317) 60 76
    T_equal_equal (318) 61 77
    T_not_equal (319) 62 78


Nonterminals, with rules where they appear

    $accept (65)
        on left: 0
    Start (66)
        on left: 1
        on right: 0
    block_end_flower (67)
        on left: 2 3
        on right: 1 4 30
    block (68)
        on left: 4 5 6
        on right: 16 17 27 28
    Multiple_stmts (69)
        on left: 7 8
        on right: 2 7 24 25 32
    stmt (70)
        on left: 9 10 11 12 13 14 15
        on right: 2 5 7
    for_stmt (71)
        on left: 16
        on right: 13 37
    while_stmt (72)
        on left: 17
        on right: 12 36
    switch_stmt (73)
        on left: 18
        on right: 11
    switch_block_end_flower (74)
        on left: 19 20
        on right: 21
    switch_block (75)
        on left: 21 22 23
        on right: 18
    case_stmt (76)
        on left: 24 25 26
        on right: 19 22 24 25
    if_stmt (77)
        on left: 27
        on right: 10
    elseif_else_empty (78)
        on left: 28 29 30 31
        on right: 27 28
    Multiple_stmts_not_if (79)
        on left: 32 33
        on right: 29
    stmt_without_if (80)
        on left: 34 35 36 37
        on right: 32
    Assignment_stmt (81)
        on left: 38 39 40 41 42 43 44
        on right: 14 35 46 48
    expr_or_empty_with_semicolon_and_assignment (82)
        on left: 45 46
        on right: 16
    expr_or_empty_with_assignment_and_closed_parent (83)
        on left: 47 48
        on right: 16
    expr_without_constants (84)
        on left: 49 50 51 52 53 54 55 56 57 58 59 60 61 62
        on right: 18 40 43
    expr (85)
        on left: 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78
        on right: 9 17 24 27 28 34 38 39 50 51 52 53 54 55 56 57 58 59 60 61 62 66 67 68 69 70 71 72 73 74 75 76 77 78 79
    expr_or_empty (86)
        on left: 79 80
        on right: 45 47
    openflower (87)
        on left: 81
        on right: 1 4 21 30
    closeflower (88)
        on left: 82
        on right: 3 8 19 20


State 0

    0 $accept: . Start $end

    T_type  shift, and go to state 1

    Start  go to state 2


State 1

    1 Start: T_type . T_main T_openParenthesis T_closedParanthesis openflower block_end_flower

    T_main  shift, and go to state 3


State 2

    0 $accept: Start . $end

    $end  shift, and go to state 4


State 3

    1 Start: T_type T_main . T_openParenthesis T_closedParanthesis openflower block_end_flower

    T_openParenthesis  shift, and go to state 5


State 4

    0 $accept: Start $end .

    $default  accept


State 5

    1 Start: T_type T_main T_openParenthesis . T_closedParanthesis openflower block_end_flower

    T_closedParanthesis  shift, and go to state 6


State 6

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis . openflower block_end_flower

    T_openFlowerBracket  shift, and go to state 7

    openflower  go to state 8


State 7

   81 openflower: T_openFlowerBracket .

    $default  reduce using rule 81 (openflower)


State 8

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    block_end_flower  go to state 20
    stmt              go to state 21
    for_stmt          go to state 22
    while_stmt        go to state 23
    switch_stmt       go to state 24
    if_stmt           go to state 25
    Assignment_stmt   go to state 26
    expr              go to state 27
    closeflower       go to state 28


State 9

   15 stmt: error . T_Semicolon

    T_Semicolon  shift, and go to state 29


State 10

   43 Assignment_stmt: T_int . T_identifier T_AssignmentOperator expr_without_constants
   44                | T_int . T_identifier T_AssignmentOperator T_numericConstants

    T_identifier  shift, and go to state 30


State 11

   40 Assignment_stmt: T_type . T_identifier T_AssignmentOperator expr_without_constants
   41                | T_type . T_identifier T_AssignmentOperator T_stringLiteral
   42                | T_type . T_identifier T_AssignmentOperator T_numericConstants

    T_identifier  shift, and go to state 31


State 12

   16 for_stmt: T_for . T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

    T_openParenthesis  shift, and go to state 32


State 13

   27 if_stmt: T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 33


State 14

   17 while_stmt: T_while . T_openParenthesis expr T_closedParanthesis block

    T_openParenthesis  shift, and go to state 34


State 15

   82 closeflower: T_closedFlowerBracket .

    $default  reduce using rule 82 (closeflower)


State 16

   38 Assignment_stmt: T_identifier . T_AssignmentOperator expr
   39                | T_identifier . T_shortHand expr
   65 expr: T_identifier .

    T_AssignmentOperator  shift, and go to state 35
    T_shortHand           shift, and go to state 36

    $default  reduce using rule 65 (expr)


State 17

   63 expr: T_numericConstants .

    $default  reduce using rule 63 (expr)


State 18

   64 expr: T_stringLiteral .

    $default  reduce using rule 64 (expr)


State 19

   18 switch_stmt: T_switch . T_openParenthesis expr_without_constants T_closedParanthesis switch_block

    T_openParenthesis  shift, and go to state 37


State 20

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis openflower block_end_flower .

    $default  reduce using rule 1 (Start)


State 21

    2 block_end_flower: stmt . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 38
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    closeflower      go to state 40


State 22

   13 stmt: for_stmt .

    $default  reduce using rule 13 (stmt)


State 23

   12 stmt: while_stmt .

    $default  reduce using rule 12 (stmt)


State 24

   11 stmt: switch_stmt .

    $default  reduce using rule 11 (stmt)


State 25

   10 stmt: if_stmt .

    $default  reduce using rule 10 (stmt)


State 26

   14 stmt: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 41


State 27

    9 stmt: expr . T_Semicolon
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_Semicolon      shift, and go to state 42
    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55


State 28

    3 block_end_flower: closeflower .

    $default  reduce using rule 3 (block_end_flower)


State 29

   15 stmt: error T_Semicolon .

    $default  reduce using rule 15 (stmt)


State 30

   43 Assignment_stmt: T_int T_identifier . T_AssignmentOperator expr_without_constants
   44                | T_int T_identifier . T_AssignmentOperator T_numericConstants

    T_AssignmentOperator  shift, and go to state 56


State 31

   40 Assignment_stmt: T_type T_identifier . T_AssignmentOperator expr_without_constants
   41                | T_type T_identifier . T_AssignmentOperator T_stringLiteral
   42                | T_type T_identifier . T_AssignmentOperator T_numericConstants

    T_AssignmentOperator  shift, and go to state 57


State 32

   16 for_stmt: T_for T_openParenthesis . expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 80 (expr_or_empty)

    Assignment_stmt                              go to state 58
    expr_or_empty_with_semicolon_and_assignment  go to state 59
    expr                                         go to state 60
    expr_or_empty                                go to state 61


State 33

   27 if_stmt: T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 63


State 34

   17 while_stmt: T_while T_openParenthesis . expr T_closedParanthesis block

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 64


State 35

   38 Assignment_stmt: T_identifier T_AssignmentOperator . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 65


State 36

   39 Assignment_stmt: T_identifier T_shortHand . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 66


State 37

   18 switch_stmt: T_switch T_openParenthesis . expr_without_constants T_closedParanthesis switch_block

    T_identifier        shift, and go to state 67
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr_without_constants  go to state 68
    expr                    go to state 69


State 38

    2 block_end_flower: stmt Multiple_stmts .

    $default  reduce using rule 2 (block_end_flower)


State 39

    7 Multiple_stmts: stmt . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 70
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    closeflower      go to state 40


State 40

    8 Multiple_stmts: closeflower .

    $default  reduce using rule 8 (Multiple_stmts)


State 41

   14 stmt: Assignment_stmt T_Semicolon .

    $default  reduce using rule 14 (stmt)


State 42

    9 stmt: expr T_Semicolon .

    $default  reduce using rule 9 (stmt)


State 43

   66 expr: expr T_plus . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 71


State 44

   67 expr: expr T_minus . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 72


State 45

   70 expr: expr T_mod . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 73


State 46

   68 expr: expr T_divide . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 74


State 47

   69 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 75


State 48

   71 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 76


State 49

   72 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 77


State 50

   73 expr: expr T_less . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 78


State 51

   74 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 79


State 52

   75 expr: expr T_greater . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 80


State 53

   76 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 81


State 54

   77 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 82


State 55

   78 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 83


State 56

   43 Assignment_stmt: T_int T_identifier T_AssignmentOperator . expr_without_constants
   44                | T_int T_identifier T_AssignmentOperator . T_numericConstants

    T_identifier        shift, and go to state 67
    T_numericConstants  shift, and go to state 84
    T_stringLiteral     shift, and go to state 18

    expr_without_constants  go to state 85
    expr                    go to state 69


State 57

   40 Assignment_stmt: T_type T_identifier T_AssignmentOperator . expr_without_constants
   41                | T_type T_identifier T_AssignmentOperator . T_stringLiteral
   42                | T_type T_identifier T_AssignmentOperator . T_numericConstants

    T_identifier        shift, and go to state 67
    T_numericConstants  shift, and go to state 86
    T_stringLiteral     shift, and go to state 87

    expr_without_constants  go to state 88
    expr                    go to state 69


State 58

   46 expr_or_empty_with_semicolon_and_assignment: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 89


State 59

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment . expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 80 (expr_or_empty)

    Assignment_stmt                              go to state 58
    expr_or_empty_with_semicolon_and_assignment  go to state 90
    expr                                         go to state 60
    expr_or_empty                                go to state 61


State 60

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr
   79 expr_or_empty: expr .

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 79 (expr_or_empty)


State 61

   45 expr_or_empty_with_semicolon_and_assignment: expr_or_empty . T_Semicolon

    T_Semicolon  shift, and go to state 91


State 62

   65 expr: T_identifier .

    $default  reduce using rule 65 (expr)


State 63

   27 if_stmt: T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 92
    T_plus               shift, and go to state 43
    T_minus              shift, and go to state 44
    T_mod                shift, and go to state 45
    T_divide             shift, and go to state 46
    T_multiply           shift, and go to state 47
    T_LogicalAnd         shift, and go to state 48
    T_LogicalOr          shift, and go to state 49
    T_less               shift, and go to state 50
    T_less_equal         shift, and go to state 51
    T_greater            shift, and go to state 52
    T_greater_equal      shift, and go to state 53
    T_equal_equal        shift, and go to state 54
    T_not_equal          shift, and go to state 55


State 64

   17 while_stmt: T_while T_openParenthesis expr . T_closedParanthesis block
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 93
    T_plus               shift, and go to state 43
    T_minus              shift, and go to state 44
    T_mod                shift, and go to state 45
    T_divide             shift, and go to state 46
    T_multiply           shift, and go to state 47
    T_LogicalAnd         shift, and go to state 48
    T_LogicalOr          shift, and go to state 49
    T_less               shift, and go to state 50
    T_less_equal         shift, and go to state 51
    T_greater            shift, and go to state 52
    T_greater_equal      shift, and go to state 53
    T_equal_equal        shift, and go to state 54
    T_not_equal          shift, and go to state 55


State 65

   38 Assignment_stmt: T_identifier T_AssignmentOperator expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 38 (Assignment_stmt)


State 66

   39 Assignment_stmt: T_identifier T_shortHand expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 39 (Assignment_stmt)


State 67

   49 expr_without_constants: T_identifier .
   65 expr: T_identifier .

    T_closedParanthesis  reduce using rule 49 (expr_without_constants)
    T_Semicolon          reduce using rule 49 (expr_without_constants)
    $default             reduce using rule 65 (expr)


State 68

   18 switch_stmt: T_switch T_openParenthesis expr_without_constants . T_closedParanthesis switch_block

    T_closedParanthesis  shift, and go to state 94


State 69

   50 expr_without_constants: expr . T_plus expr
   51                       | expr . T_minus expr
   52                       | expr . T_divide expr
   53                       | expr . T_multiply expr
   54                       | expr . T_mod expr
   55                       | expr . T_LogicalAnd expr
   56                       | expr . T_LogicalOr expr
   57                       | expr . T_less expr
   58                       | expr . T_less_equal expr
   59                       | expr . T_greater expr
   60                       | expr . T_greater_equal expr
   61                       | expr . T_equal_equal expr
   62                       | expr . T_not_equal expr
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 95
    T_minus          shift, and go to state 96
    T_mod            shift, and go to state 97
    T_divide         shift, and go to state 98
    T_multiply       shift, and go to state 99
    T_LogicalAnd     shift, and go to state 100
    T_LogicalOr      shift, and go to state 101
    T_less           shift, and go to state 102
    T_less_equal     shift, and go to state 103
    T_greater        shift, and go to state 104
    T_greater_equal  shift, and go to state 105
    T_equal_equal    shift, and go to state 106
    T_not_equal      shift, and go to state 107


State 70

    7 Multiple_stmts: stmt Multiple_stmts .

    $default  reduce using rule 7 (Multiple_stmts)


State 71

   66 expr: expr . T_plus expr
   66     | expr T_plus expr .
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 66 (expr)


State 72

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   67     | expr T_minus expr .
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 67 (expr)


State 73

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   70     | expr T_mod expr .
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    $default  reduce using rule 70 (expr)


State 74

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   68     | expr T_divide expr .
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    $default  reduce using rule 68 (expr)


State 75

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   69     | expr T_multiply expr .
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    $default  reduce using rule 69 (expr)


State 76

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   71     | expr T_LogicalAnd expr .
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 71 (expr)


State 77

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   72     | expr T_LogicalOr expr .
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 72 (expr)


State 78

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   73     | expr T_less expr .
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 73 (expr)


State 79

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   74     | expr T_less_equal expr .
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 74 (expr)


State 80

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   75     | expr T_greater expr .
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 75 (expr)


State 81

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   76     | expr T_greater_equal expr .
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 76 (expr)


State 82

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   77     | expr T_equal_equal expr .
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 77 (expr)


State 83

   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr
   78     | expr T_not_equal expr .

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 78 (expr)


State 84

   44 Assignment_stmt: T_int T_identifier T_AssignmentOperator T_numericConstants .
   63 expr: T_numericConstants .

    T_closedParanthesis  reduce using rule 44 (Assignment_stmt)
    T_Semicolon          reduce using rule 44 (Assignment_stmt)
    $default             reduce using rule 63 (expr)


State 85

   43 Assignment_stmt: T_int T_identifier T_AssignmentOperator expr_without_constants .

    $default  reduce using rule 43 (Assignment_stmt)


State 86

   42 Assignment_stmt: T_type T_identifier T_AssignmentOperator T_numericConstants .
   63 expr: T_numericConstants .

    T_closedParanthesis  reduce using rule 42 (Assignment_stmt)
    T_Semicolon          reduce using rule 42 (Assignment_stmt)
    $default             reduce using rule 63 (expr)


State 87

   41 Assignment_stmt: T_type T_identifier T_AssignmentOperator T_stringLiteral .
   64 expr: T_stringLiteral .

    T_closedParanthesis  reduce using rule 41 (Assignment_stmt)
    T_Semicolon          reduce using rule 41 (Assignment_stmt)
    $default             reduce using rule 64 (expr)


State 88

   40 Assignment_stmt: T_type T_identifier T_AssignmentOperator expr_without_constants .

    $default  reduce using rule 40 (Assignment_stmt)


State 89

   46 expr_or_empty_with_semicolon_and_assignment: Assignment_stmt T_Semicolon .

    $default  reduce using rule 46 (expr_or_empty_with_semicolon_and_assignment)


State 90

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment . expr_or_empty_with_assignment_and_closed_parent block

    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 80 (expr_or_empty)

    Assignment_stmt                                  go to state 108
    expr_or_empty_with_assignment_and_closed_parent  go to state 109
    expr                                             go to state 60
    expr_or_empty                                    go to state 110


State 91

   45 expr_or_empty_with_semicolon_and_assignment: expr_or_empty T_Semicolon .

    $default  reduce using rule 45 (expr_or_empty_with_semicolon_and_assignment)


State 92

   27 if_stmt: T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 111
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 112
    stmt             go to state 113
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    openflower       go to state 114


State 93

   17 while_stmt: T_while T_openParenthesis expr T_closedParanthesis . block

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 111
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 115
    stmt             go to state 113
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    openflower       go to state 114


State 94

   18 switch_stmt: T_switch T_openParenthesis expr_without_constants T_closedParanthesis . switch_block

    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 116
    T_case               shift, and go to state 117
    T_default            shift, and go to state 118

    $default  reduce using rule 26 (case_stmt)

    switch_block  go to state 119
    case_stmt     go to state 120
    openflower    go to state 121


State 95

   50 expr_without_constants: expr T_plus . expr
   66 expr: expr T_plus . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 122


State 96

   51 expr_without_constants: expr T_minus . expr
   67 expr: expr T_minus . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 123


State 97

   54 expr_without_constants: expr T_mod . expr
   70 expr: expr T_mod . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 124


State 98

   52 expr_without_constants: expr T_divide . expr
   68 expr: expr T_divide . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 125


State 99

   53 expr_without_constants: expr T_multiply . expr
   69 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 126


State 100

   55 expr_without_constants: expr T_LogicalAnd . expr
   71 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 127


State 101

   56 expr_without_constants: expr T_LogicalOr . expr
   72 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 128


State 102

   57 expr_without_constants: expr T_less . expr
   73 expr: expr T_less . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 129


State 103

   58 expr_without_constants: expr T_less_equal . expr
   74 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 130


State 104

   59 expr_without_constants: expr T_greater . expr
   75 expr: expr T_greater . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 131


State 105

   60 expr_without_constants: expr T_greater_equal . expr
   76 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 132


State 106

   61 expr_without_constants: expr T_equal_equal . expr
   77 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 133


State 107

   62 expr_without_constants: expr T_not_equal . expr
   78 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 134


State 108

   48 expr_or_empty_with_assignment_and_closed_parent: Assignment_stmt . T_closedParanthesis

    T_closedParanthesis  shift, and go to state 135


State 109

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent . block

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 111
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 136
    stmt             go to state 113
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    openflower       go to state 114


State 110

   47 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty . T_closedParanthesis

    T_closedParanthesis  shift, and go to state 137


State 111

    6 block: T_Semicolon .

    $default  reduce using rule 6 (block)


State 112

   27 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 138

    T_else    [reduce using rule 31 (elseif_else_empty)]
    $default  reduce using rule 31 (elseif_else_empty)

    elseif_else_empty  go to state 139


State 113

    5 block: stmt .

    $default  reduce using rule 5 (block)


State 114

    4 block: openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    block_end_flower  go to state 140
    stmt              go to state 21
    for_stmt          go to state 22
    while_stmt        go to state 23
    switch_stmt       go to state 24
    if_stmt           go to state 25
    Assignment_stmt   go to state 26
    expr              go to state 27
    closeflower       go to state 28


State 115

   17 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block .

    $default  reduce using rule 17 (while_stmt)


State 116

   23 switch_block: T_Semicolon .

    $default  reduce using rule 23 (switch_block)


State 117

   24 case_stmt: T_case . expr T_colon Multiple_stmts case_stmt

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 141


State 118

   25 case_stmt: T_default . T_colon Multiple_stmts case_stmt

    T_colon  shift, and go to state 142


State 119

   18 switch_stmt: T_switch T_openParenthesis expr_without_constants T_closedParanthesis switch_block .

    $default  reduce using rule 18 (switch_stmt)


State 120

   22 switch_block: case_stmt .

    $default  reduce using rule 22 (switch_block)


State 121

   21 switch_block: openflower . switch_block_end_flower

    T_closedFlowerBracket  shift, and go to state 15
    T_case                 shift, and go to state 117
    T_default              shift, and go to state 118

    T_closedFlowerBracket  [reduce using rule 26 (case_stmt)]

    switch_block_end_flower  go to state 143
    case_stmt                go to state 144
    closeflower              go to state 145


State 122

   50 expr_without_constants: expr T_plus expr .
   66 expr: expr . T_plus expr
   66     | expr T_plus expr .
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 50 (expr_without_constants)
    T_Semicolon          reduce using rule 50 (expr_without_constants)
    $default             reduce using rule 66 (expr)


State 123

   51 expr_without_constants: expr T_minus expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   67     | expr T_minus expr .
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 51 (expr_without_constants)
    T_Semicolon          reduce using rule 51 (expr_without_constants)
    $default             reduce using rule 67 (expr)


State 124

   54 expr_without_constants: expr T_mod expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   70     | expr T_mod expr .
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 54 (expr_without_constants)
    T_Semicolon          reduce using rule 54 (expr_without_constants)
    $default             reduce using rule 70 (expr)


State 125

   52 expr_without_constants: expr T_divide expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   68     | expr T_divide expr .
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 52 (expr_without_constants)
    T_Semicolon          reduce using rule 52 (expr_without_constants)
    $default             reduce using rule 68 (expr)


State 126

   53 expr_without_constants: expr T_multiply expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   69     | expr T_multiply expr .
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 53 (expr_without_constants)
    T_Semicolon          reduce using rule 53 (expr_without_constants)
    $default             reduce using rule 69 (expr)


State 127

   55 expr_without_constants: expr T_LogicalAnd expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   71     | expr T_LogicalAnd expr .
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    T_LogicalAnd  reduce using rule 71 (expr)
    T_LogicalOr   reduce using rule 71 (expr)
    $default      reduce using rule 55 (expr_without_constants)


State 128

   56 expr_without_constants: expr T_LogicalOr expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   72     | expr T_LogicalOr expr .
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    T_LogicalAnd  reduce using rule 72 (expr)
    T_LogicalOr   reduce using rule 72 (expr)
    $default      reduce using rule 56 (expr_without_constants)


State 129

   57 expr_without_constants: expr T_less expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   73     | expr T_less expr .
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 57 (expr_without_constants)
    T_Semicolon          reduce using rule 57 (expr_without_constants)
    $default             reduce using rule 73 (expr)


State 130

   58 expr_without_constants: expr T_less_equal expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   74     | expr T_less_equal expr .
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 58 (expr_without_constants)
    T_Semicolon          reduce using rule 58 (expr_without_constants)
    $default             reduce using rule 74 (expr)


State 131

   59 expr_without_constants: expr T_greater expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   75     | expr T_greater expr .
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 59 (expr_without_constants)
    T_Semicolon          reduce using rule 59 (expr_without_constants)
    $default             reduce using rule 75 (expr)


State 132

   60 expr_without_constants: expr T_greater_equal expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   76     | expr T_greater_equal expr .
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 60 (expr_without_constants)
    T_Semicolon          reduce using rule 60 (expr_without_constants)
    $default             reduce using rule 76 (expr)


State 133

   61 expr_without_constants: expr T_equal_equal expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   77     | expr T_equal_equal expr .
   78     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 61 (expr_without_constants)
    T_Semicolon          reduce using rule 61 (expr_without_constants)
    $default             reduce using rule 77 (expr)


State 134

   62 expr_without_constants: expr T_not_equal expr .
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr
   78     | expr T_not_equal expr .

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 62 (expr_without_constants)
    T_Semicolon          reduce using rule 62 (expr_without_constants)
    $default             reduce using rule 78 (expr)


State 135

   48 expr_or_empty_with_assignment_and_closed_parent: Assignment_stmt T_closedParanthesis .

    $default  reduce using rule 48 (expr_or_empty_with_assignment_and_closed_parent)


State 136

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block .

    $default  reduce using rule 16 (for_stmt)


State 137

   47 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty T_closedParanthesis .

    $default  reduce using rule 47 (expr_or_empty_with_assignment_and_closed_parent)


State 138

   28 elseif_else_empty: T_else . T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   29                  | T_else . Multiple_stmts_not_if
   30                  | T_else . openflower block_end_flower

    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 146
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 147
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18

    for_stmt               go to state 148
    while_stmt             go to state 149
    Multiple_stmts_not_if  go to state 150
    stmt_without_if        go to state 151
    Assignment_stmt        go to state 152
    expr                   go to state 153
    openflower             go to state 154


State 139

   27 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 27 (if_stmt)


State 140

    4 block: openflower block_end_flower .

    $default  reduce using rule 4 (block)


State 141

   24 case_stmt: T_case expr . T_colon Multiple_stmts case_stmt
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_colon          shift, and go to state 155
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55


State 142

   25 case_stmt: T_default T_colon . Multiple_stmts case_stmt

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 156
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    closeflower      go to state 40


State 143

   21 switch_block: openflower switch_block_end_flower .

    $default  reduce using rule 21 (switch_block)


State 144

   19 switch_block_end_flower: case_stmt . closeflower

    T_closedFlowerBracket  shift, and go to state 15

    closeflower  go to state 157


State 145

   20 switch_block_end_flower: closeflower .

    $default  reduce using rule 20 (switch_block_end_flower)


State 146

   28 elseif_else_empty: T_else T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 158


State 147

   33 Multiple_stmts_not_if: T_Semicolon .

    $default  reduce using rule 33 (Multiple_stmts_not_if)


State 148

   37 stmt_without_if: for_stmt .

    $default  reduce using rule 37 (stmt_without_if)


State 149

   36 stmt_without_if: while_stmt .

    $default  reduce using rule 36 (stmt_without_if)


State 150

   29 elseif_else_empty: T_else Multiple_stmts_not_if .

    $default  reduce using rule 29 (elseif_else_empty)


State 151

   32 Multiple_stmts_not_if: stmt_without_if . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 159
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    closeflower      go to state 40


State 152

   35 stmt_without_if: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 160


State 153

   34 stmt_without_if: expr . T_Semicolon
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_Semicolon      shift, and go to state 161
    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55


State 154

   30 elseif_else_empty: T_else openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    block_end_flower  go to state 162
    stmt              go to state 21
    for_stmt          go to state 22
    while_stmt        go to state 23
    switch_stmt       go to state 24
    if_stmt           go to state 25
    Assignment_stmt   go to state 26
    expr              go to state 27
    closeflower       go to state 28


State 155

   24 case_stmt: T_case expr T_colon . Multiple_stmts case_stmt

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 163
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    closeflower      go to state 40


State 156

   25 case_stmt: T_default T_colon Multiple_stmts . case_stmt

    T_case     shift, and go to state 117
    T_default  shift, and go to state 118

    $default  reduce using rule 26 (case_stmt)

    case_stmt  go to state 164


State 157

   19 switch_block_end_flower: case_stmt closeflower .

    $default  reduce using rule 19 (switch_block_end_flower)


State 158

   28 elseif_else_empty: T_else T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_identifier        shift, and go to state 62
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 165


State 159

   32 Multiple_stmts_not_if: stmt_without_if Multiple_stmts .

    $default  reduce using rule 32 (Multiple_stmts_not_if)


State 160

   35 stmt_without_if: Assignment_stmt T_Semicolon .

    $default  reduce using rule 35 (stmt_without_if)


State 161

   34 stmt_without_if: expr T_Semicolon .

    $default  reduce using rule 34 (stmt_without_if)


State 162

   30 elseif_else_empty: T_else openflower block_end_flower .

    $default  reduce using rule 30 (elseif_else_empty)


State 163

   24 case_stmt: T_case expr T_colon Multiple_stmts . case_stmt

    T_case     shift, and go to state 117
    T_default  shift, and go to state 118

    $default  reduce using rule 26 (case_stmt)

    case_stmt  go to state 166


State 164

   25 case_stmt: T_default T_colon Multiple_stmts case_stmt .

    $default  reduce using rule 25 (case_stmt)


State 165

   28 elseif_else_empty: T_else T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty
   66 expr: expr . T_plus expr
   67     | expr . T_minus expr
   68     | expr . T_divide expr
   69     | expr . T_multiply expr
   70     | expr . T_mod expr
   71     | expr . T_LogicalAnd expr
   72     | expr . T_LogicalOr expr
   73     | expr . T_less expr
   74     | expr . T_less_equal expr
   75     | expr . T_greater expr
   76     | expr . T_greater_equal expr
   77     | expr . T_equal_equal expr
   78     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 167
    T_plus               shift, and go to state 43
    T_minus              shift, and go to state 44
    T_mod                shift, and go to state 45
    T_divide             shift, and go to state 46
    T_multiply           shift, and go to state 47
    T_LogicalAnd         shift, and go to state 48
    T_LogicalOr          shift, and go to state 49
    T_less               shift, and go to state 50
    T_less_equal         shift, and go to state 51
    T_greater            shift, and go to state 52
    T_greater_equal      shift, and go to state 53
    T_equal_equal        shift, and go to state 54
    T_not_equal          shift, and go to state 55


State 166

   24 case_stmt: T_case expr T_colon Multiple_stmts case_stmt .

    $default  reduce using rule 24 (case_stmt)


State 167

   28 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 111
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 168
    stmt             go to state 113
    for_stmt         go to state 22
    while_stmt       go to state 23
    switch_stmt      go to state 24
    if_stmt          go to state 25
    Assignment_stmt  go to state 26
    expr             go to state 27
    openflower       go to state 114


State 168

   28 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 138

    T_else    [reduce using rule 31 (elseif_else_empty)]
    $default  reduce using rule 31 (elseif_else_empty)

    elseif_else_empty  go to state 169


State 169

   28 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 28 (elseif_else_empty)
