Terminals unused in grammar

    T_keyword
    T_return
    T_InputStream
    T_OutputStream
    T_RelationalOperator
    T_LogicalOperator
    T_UnaryOperator
    T_character
    T_whiteSpace
    T_struct
    T_class
    T_namespace
    T_array
    T_caseop
    T_include
    T_comma
    T_dot
    T_float
    T_double
    T_long
    T_longVal
    T_doubleVal
    T_floatVal
    T_bool
    T_bool_true
    T_bool_false


State 117 conflicts: 1 shift/reduce
State 125 conflicts: 2 shift/reduce
State 168 conflicts: 1 shift/reduce


Grammar

    0 $accept: Start $end

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis openflower block_end_flower

    2 block_end_flower: stmt Multiple_stmts
    3                 | closeflower

    4 block: openflower block_end_flower
    5      | stmt
    6      | T_Semicolon

    7 Multiple_stmts: stmt Multiple_stmts
    8               | closeflower

    9 stmt: expr T_Semicolon
   10     | if_stmt
   11     | SwitchStmt
   12     | while_stmt
   13     | for_stmt
   14     | Assignment_stmt T_Semicolon
   15     | error T_Semicolon

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

   17 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block

   18 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty

   19 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   20                  | T_else Multiple_stmts_not_if
   21                  | T_else openflower block_end_flower
   22                  | %empty

   23 Multiple_stmts_not_if: stmt_without_if Multiple_stmts
   24                      | T_Semicolon

   25 stmt_without_if: expr T_Semicolon
   26                | Assignment_stmt T_Semicolon
   27                | while_stmt
   28                | for_stmt

   29 Assignment_stmt: T_identifier T_AssignmentOperator expr
   30                | T_identifier T_shortHand expr
   31                | T_type T_identifier T_AssignmentOperator expr_without_constants
   32                | T_type T_identifier T_AssignmentOperator T_stringLiteral
   33                | T_type T_identifier T_AssignmentOperator T_numericConstants
   34                | T_int T_identifier T_AssignmentOperator expr_without_constants
   35                | T_int T_identifier T_AssignmentOperator T_numericConstants

   36 expr_or_empty_with_semicolon_and_assignment: expr_or_empty T_Semicolon
   37                                            | Assignment_stmt T_Semicolon

   38 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty T_closedParanthesis
   39                                                | Assignment_stmt T_closedParanthesis

   40 expr_without_constants: T_identifier
   41                       | expr T_plus expr
   42                       | expr T_minus expr
   43                       | expr T_divide expr
   44                       | expr T_multiply expr
   45                       | expr T_mod expr
   46                       | expr T_LogicalAnd expr
   47                       | expr T_LogicalOr expr
   48                       | expr T_less expr
   49                       | expr T_less_equal expr
   50                       | expr T_greater expr
   51                       | expr T_greater_equal expr
   52                       | expr T_equal_equal expr
   53                       | expr T_not_equal expr

   54 expr: T_numericConstants
   55     | T_stringLiteral
   56     | T_identifier
   57     | expr T_plus expr
   58     | expr T_minus expr
   59     | expr T_divide expr
   60     | expr T_multiply expr
   61     | expr T_mod expr
   62     | expr T_LogicalAnd expr
   63     | expr T_LogicalOr expr
   64     | expr T_less expr
   65     | expr T_less_equal expr
   66     | expr T_greater expr
   67     | expr T_greater_equal expr
   68     | expr T_equal_equal expr
   69     | expr T_not_equal expr

   70 expr_or_empty: expr
   71              | %empty

   72 openflower: T_openFlowerBracket

   73 closeflower: T_closedFlowerBracket

   74 SwitchStmt: T_switch '(' T_identifier
   75           | expr ')' '{' InnerSwitchStmt '}'

   76 InnerSwitchStmt: SwitchCaseStmt
   77                | SwitchCaseStmt DefaultSwitchStmt

   78 SwitchCaseStmt: SwitchCaseStmt SwitchCaseStmt
   79               | T_case T_intVal ':' stmt
   80               | T_break ';'

   81 DefaultSwitchStmt: T_default ':' stmt T_break ';'
   82                  | T_default ':' stmt


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 74
    ')' (41) 75
    ':' (58) 79 81 82
    ';' (59) 80 81
    '{' (123) 75
    '}' (125) 75
    error (256) 15
    T_keyword <s> (258)
    T_int <s> (259) 34 35
    T_main <s> (260) 1
    T_type <s> (261) 1 31 32 33
    T_return <s> (262)
    T_for <s> (263) 16
    T_if <s> (264) 18 19
    T_else <s> (265) 19 20 21
    T_while <s> (266) 17
    T_InputStream <s> (267)
    T_OutputStream <s> (268)
    T_openParenthesis <s> (269) 1 16 17 18 19
    T_closedParanthesis <s> (270) 1 17 18 19 38 39
    T_openFlowerBracket <s> (271) 72
    T_closedFlowerBracket <s> (272) 73
    T_RelationalOperator <s> (273)
    T_LogicalOperator <s> (274)
    T_UnaryOperator <s> (275)
    T_AssignmentOperator <s> (276) 29 31 32 33 34 35
    T_Semicolon <s> (277) 6 9 14 15 24 25 26 36 37
    T_identifier <s> (278) 29 30 31 32 33 34 35 40 56 74
    T_numericConstants <s> (279) 33 35 54
    T_stringLiteral <s> (280) 32 55
    T_character <s> (281)
    T_plus <s> (282) 41 57
    T_minus <s> (283) 42 58
    T_mod <s> (284) 45 61
    T_divide <s> (285) 43 59
    T_multiply <s> (286) 44 60
    T_whiteSpace <s> (287)
    T_shortHand <s> (288) 30
    T_switch <s> (289) 74
    T_case <s> (290) 79
    T_break <s> (291) 80 81
    T_default <s> (292) 81 82
    T_struct <s> (293)
    T_class <s> (294)
    T_namespace <s> (295)
    T_array <s> (296)
    T_caseop <s> (297)
    T_include <s> (298)
    T_comma <s> (299)
    T_dot <s> (300)
    T_float <s> (301)
    T_double <s> (302)
    T_long <s> (303)
    T_intVal <s> (304) 79
    T_longVal <s> (305)
    T_doubleVal <s> (306)
    T_floatVal <s> (307)
    T_bool <s> (308)
    T_bool_true <s> (309)
    T_bool_false <s> (310)
    T_LogicalAnd (311) 46 62
    T_LogicalOr (312) 47 63
    T_less (313) 48 64
    T_less_equal (314) 49 65
    T_greater (315) 50 66
    T_greater_equal (316) 51 67
    T_equal_equal (317) 52 68
    T_not_equal (318) 53 69


Nonterminals, with rules where they appear

    $accept (70)
        on left: 0
    Start (71)
        on left: 1
        on right: 0
    block_end_flower (72)
        on left: 2 3
        on right: 1 4 21
    block (73)
        on left: 4 5 6
        on right: 16 17 18 19
    Multiple_stmts (74)
        on left: 7 8
        on right: 2 7 23
    stmt (75)
        on left: 9 10 11 12 13 14 15
        on right: 2 5 7 79 81 82
    for_stmt (76)
        on left: 16
        on right: 13 28
    while_stmt (77)
        on left: 17
        on right: 12 27
    if_stmt (78)
        on left: 18
        on right: 10
    elseif_else_empty (79)
        on left: 19 20 21 22
        on right: 18 19
    Multiple_stmts_not_if (80)
        on left: 23 24
        on right: 20
    stmt_without_if (81)
        on left: 25 26 27 28
        on right: 23
    Assignment_stmt (82)
        on left: 29 30 31 32 33 34 35
        on right: 14 26 37 39
    expr_or_empty_with_semicolon_and_assignment (83)
        on left: 36 37
        on right: 16
    expr_or_empty_with_assignment_and_closed_parent (84)
        on left: 38 39
        on right: 16
    expr_without_constants (85)
        on left: 40 41 42 43 44 45 46 47 48 49 50 51 52 53
        on right: 31 34
    expr (86)
        on left: 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69
        on right: 9 17 18 19 25 29 30 41 42 43 44 45 46 47 48 49 50 51 52 53 57 58 59 60 61 62 63 64 65 66 67 68 69 70 75
    expr_or_empty (87)
        on left: 70 71
        on right: 36 38
    openflower (88)
        on left: 72
        on right: 1 4 21
    closeflower (89)
        on left: 73
        on right: 3 8
    SwitchStmt (90)
        on left: 74 75
        on right: 11
    InnerSwitchStmt (91)
        on left: 76 77
        on right: 75
    SwitchCaseStmt (92)
        on left: 78 79 80
        on right: 76 77 78
    DefaultSwitchStmt (93)
        on left: 81 82
        on right: 77


State 0

    0 $accept: . Start $end

    T_type  shift, and go to state 1

    Start  go to state 2


State 1

    1 Start: T_type . T_main T_openParenthesis T_closedParanthesis openflower block_end_flower

    T_main  shift, and go to state 3


State 2

    0 $accept: Start . $end

    $end  shift, and go to state 4


State 3

    1 Start: T_type T_main . T_openParenthesis T_closedParanthesis openflower block_end_flower

    T_openParenthesis  shift, and go to state 5


State 4

    0 $accept: Start $end .

    $default  accept


State 5

    1 Start: T_type T_main T_openParenthesis . T_closedParanthesis openflower block_end_flower

    T_closedParanthesis  shift, and go to state 6


State 6

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis . openflower block_end_flower

    T_openFlowerBracket  shift, and go to state 7

    openflower  go to state 8


State 7

   72 openflower: T_openFlowerBracket .

    $default  reduce using rule 72 (openflower)


State 8

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    block_end_flower  go to state 20
    stmt              go to state 21
    for_stmt          go to state 22
    while_stmt        go to state 23
    if_stmt           go to state 24
    Assignment_stmt   go to state 25
    expr              go to state 26
    closeflower       go to state 27
    SwitchStmt        go to state 28


State 9

   15 stmt: error . T_Semicolon

    T_Semicolon  shift, and go to state 29


State 10

   34 Assignment_stmt: T_int . T_identifier T_AssignmentOperator expr_without_constants
   35                | T_int . T_identifier T_AssignmentOperator T_numericConstants

    T_identifier  shift, and go to state 30


State 11

   31 Assignment_stmt: T_type . T_identifier T_AssignmentOperator expr_without_constants
   32                | T_type . T_identifier T_AssignmentOperator T_stringLiteral
   33                | T_type . T_identifier T_AssignmentOperator T_numericConstants

    T_identifier  shift, and go to state 31


State 12

   16 for_stmt: T_for . T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

    T_openParenthesis  shift, and go to state 32


State 13

   18 if_stmt: T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 33


State 14

   17 while_stmt: T_while . T_openParenthesis expr T_closedParanthesis block

    T_openParenthesis  shift, and go to state 34


State 15

   73 closeflower: T_closedFlowerBracket .

    $default  reduce using rule 73 (closeflower)


State 16

   29 Assignment_stmt: T_identifier . T_AssignmentOperator expr
   30                | T_identifier . T_shortHand expr
   56 expr: T_identifier .

    T_AssignmentOperator  shift, and go to state 35
    T_shortHand           shift, and go to state 36

    $default  reduce using rule 56 (expr)


State 17

   54 expr: T_numericConstants .

    $default  reduce using rule 54 (expr)


State 18

   55 expr: T_stringLiteral .

    $default  reduce using rule 55 (expr)


State 19

   74 SwitchStmt: T_switch . '(' T_identifier

    '('  shift, and go to state 37


State 20

    1 Start: T_type T_main T_openParenthesis T_closedParanthesis openflower block_end_flower .

    $default  reduce using rule 1 (Start)


State 21

    2 block_end_flower: stmt . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 38
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    closeflower      go to state 40
    SwitchStmt       go to state 28


State 22

   13 stmt: for_stmt .

    $default  reduce using rule 13 (stmt)


State 23

   12 stmt: while_stmt .

    $default  reduce using rule 12 (stmt)


State 24

   10 stmt: if_stmt .

    $default  reduce using rule 10 (stmt)


State 25

   14 stmt: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 41


State 26

    9 stmt: expr . T_Semicolon
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr
   75 SwitchStmt: expr . ')' '{' InnerSwitchStmt '}'

    T_Semicolon      shift, and go to state 42
    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55
    ')'              shift, and go to state 56


State 27

    3 block_end_flower: closeflower .

    $default  reduce using rule 3 (block_end_flower)


State 28

   11 stmt: SwitchStmt .

    $default  reduce using rule 11 (stmt)


State 29

   15 stmt: error T_Semicolon .

    $default  reduce using rule 15 (stmt)


State 30

   34 Assignment_stmt: T_int T_identifier . T_AssignmentOperator expr_without_constants
   35                | T_int T_identifier . T_AssignmentOperator T_numericConstants

    T_AssignmentOperator  shift, and go to state 57


State 31

   31 Assignment_stmt: T_type T_identifier . T_AssignmentOperator expr_without_constants
   32                | T_type T_identifier . T_AssignmentOperator T_stringLiteral
   33                | T_type T_identifier . T_AssignmentOperator T_numericConstants

    T_AssignmentOperator  shift, and go to state 58


State 32

   16 for_stmt: T_for T_openParenthesis . expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 71 (expr_or_empty)

    Assignment_stmt                              go to state 59
    expr_or_empty_with_semicolon_and_assignment  go to state 60
    expr                                         go to state 61
    expr_or_empty                                go to state 62


State 33

   18 if_stmt: T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 64


State 34

   17 while_stmt: T_while T_openParenthesis . expr T_closedParanthesis block

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 65


State 35

   29 Assignment_stmt: T_identifier T_AssignmentOperator . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 66


State 36

   30 Assignment_stmt: T_identifier T_shortHand . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 67


State 37

   74 SwitchStmt: T_switch '(' . T_identifier

    T_identifier  shift, and go to state 68


State 38

    2 block_end_flower: stmt Multiple_stmts .

    $default  reduce using rule 2 (block_end_flower)


State 39

    7 Multiple_stmts: stmt . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 69
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    closeflower      go to state 40
    SwitchStmt       go to state 28


State 40

    8 Multiple_stmts: closeflower .

    $default  reduce using rule 8 (Multiple_stmts)


State 41

   14 stmt: Assignment_stmt T_Semicolon .

    $default  reduce using rule 14 (stmt)


State 42

    9 stmt: expr T_Semicolon .

    $default  reduce using rule 9 (stmt)


State 43

   57 expr: expr T_plus . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 70


State 44

   58 expr: expr T_minus . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 71


State 45

   61 expr: expr T_mod . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 72


State 46

   59 expr: expr T_divide . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 73


State 47

   60 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 74


State 48

   62 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 75


State 49

   63 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 76


State 50

   64 expr: expr T_less . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 77


State 51

   65 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 78


State 52

   66 expr: expr T_greater . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 79


State 53

   67 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 80


State 54

   68 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 81


State 55

   69 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 82


State 56

   75 SwitchStmt: expr ')' . '{' InnerSwitchStmt '}'

    '{'  shift, and go to state 83


State 57

   34 Assignment_stmt: T_int T_identifier T_AssignmentOperator . expr_without_constants
   35                | T_int T_identifier T_AssignmentOperator . T_numericConstants

    T_identifier        shift, and go to state 84
    T_numericConstants  shift, and go to state 85
    T_stringLiteral     shift, and go to state 18

    expr_without_constants  go to state 86
    expr                    go to state 87


State 58

   31 Assignment_stmt: T_type T_identifier T_AssignmentOperator . expr_without_constants
   32                | T_type T_identifier T_AssignmentOperator . T_stringLiteral
   33                | T_type T_identifier T_AssignmentOperator . T_numericConstants

    T_identifier        shift, and go to state 84
    T_numericConstants  shift, and go to state 88
    T_stringLiteral     shift, and go to state 89

    expr_without_constants  go to state 90
    expr                    go to state 87


State 59

   37 expr_or_empty_with_semicolon_and_assignment: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 91


State 60

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment . expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block

    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 71 (expr_or_empty)

    Assignment_stmt                              go to state 59
    expr_or_empty_with_semicolon_and_assignment  go to state 92
    expr                                         go to state 61
    expr_or_empty                                go to state 62


State 61

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr
   70 expr_or_empty: expr .

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 70 (expr_or_empty)


State 62

   36 expr_or_empty_with_semicolon_and_assignment: expr_or_empty . T_Semicolon

    T_Semicolon  shift, and go to state 93


State 63

   56 expr: T_identifier .

    $default  reduce using rule 56 (expr)


State 64

   18 if_stmt: T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 94
    T_plus               shift, and go to state 43
    T_minus              shift, and go to state 44
    T_mod                shift, and go to state 45
    T_divide             shift, and go to state 46
    T_multiply           shift, and go to state 47
    T_LogicalAnd         shift, and go to state 48
    T_LogicalOr          shift, and go to state 49
    T_less               shift, and go to state 50
    T_less_equal         shift, and go to state 51
    T_greater            shift, and go to state 52
    T_greater_equal      shift, and go to state 53
    T_equal_equal        shift, and go to state 54
    T_not_equal          shift, and go to state 55


State 65

   17 while_stmt: T_while T_openParenthesis expr . T_closedParanthesis block
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 95
    T_plus               shift, and go to state 43
    T_minus              shift, and go to state 44
    T_mod                shift, and go to state 45
    T_divide             shift, and go to state 46
    T_multiply           shift, and go to state 47
    T_LogicalAnd         shift, and go to state 48
    T_LogicalOr          shift, and go to state 49
    T_less               shift, and go to state 50
    T_less_equal         shift, and go to state 51
    T_greater            shift, and go to state 52
    T_greater_equal      shift, and go to state 53
    T_equal_equal        shift, and go to state 54
    T_not_equal          shift, and go to state 55


State 66

   29 Assignment_stmt: T_identifier T_AssignmentOperator expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 29 (Assignment_stmt)


State 67

   30 Assignment_stmt: T_identifier T_shortHand expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 30 (Assignment_stmt)


State 68

   74 SwitchStmt: T_switch '(' T_identifier .

    $default  reduce using rule 74 (SwitchStmt)


State 69

    7 Multiple_stmts: stmt Multiple_stmts .

    $default  reduce using rule 7 (Multiple_stmts)


State 70

   57 expr: expr . T_plus expr
   57     | expr T_plus expr .
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 57 (expr)


State 71

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   58     | expr T_minus expr .
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 58 (expr)


State 72

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   61     | expr T_mod expr .
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    $default  reduce using rule 61 (expr)


State 73

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   59     | expr T_divide expr .
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    $default  reduce using rule 59 (expr)


State 74

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   60     | expr T_multiply expr .
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    $default  reduce using rule 60 (expr)


State 75

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   62     | expr T_LogicalAnd expr .
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 62 (expr)


State 76

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   63     | expr T_LogicalOr expr .
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    $default  reduce using rule 63 (expr)


State 77

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   64     | expr T_less expr .
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 64 (expr)


State 78

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   65     | expr T_less_equal expr .
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 65 (expr)


State 79

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   66     | expr T_greater expr .
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 66 (expr)


State 80

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   67     | expr T_greater_equal expr .
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 67 (expr)


State 81

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   68     | expr T_equal_equal expr .
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 68 (expr)


State 82

   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr
   69     | expr T_not_equal expr .

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    $default  reduce using rule 69 (expr)


State 83

   75 SwitchStmt: expr ')' '{' . InnerSwitchStmt '}'

    T_case   shift, and go to state 96
    T_break  shift, and go to state 97

    InnerSwitchStmt  go to state 98
    SwitchCaseStmt   go to state 99


State 84

   40 expr_without_constants: T_identifier .
   56 expr: T_identifier .

    T_closedParanthesis  reduce using rule 40 (expr_without_constants)
    T_Semicolon          reduce using rule 40 (expr_without_constants)
    $default             reduce using rule 56 (expr)


State 85

   35 Assignment_stmt: T_int T_identifier T_AssignmentOperator T_numericConstants .
   54 expr: T_numericConstants .

    T_closedParanthesis  reduce using rule 35 (Assignment_stmt)
    T_Semicolon          reduce using rule 35 (Assignment_stmt)
    $default             reduce using rule 54 (expr)


State 86

   34 Assignment_stmt: T_int T_identifier T_AssignmentOperator expr_without_constants .

    $default  reduce using rule 34 (Assignment_stmt)


State 87

   41 expr_without_constants: expr . T_plus expr
   42                       | expr . T_minus expr
   43                       | expr . T_divide expr
   44                       | expr . T_multiply expr
   45                       | expr . T_mod expr
   46                       | expr . T_LogicalAnd expr
   47                       | expr . T_LogicalOr expr
   48                       | expr . T_less expr
   49                       | expr . T_less_equal expr
   50                       | expr . T_greater expr
   51                       | expr . T_greater_equal expr
   52                       | expr . T_equal_equal expr
   53                       | expr . T_not_equal expr
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus           shift, and go to state 100
    T_minus          shift, and go to state 101
    T_mod            shift, and go to state 102
    T_divide         shift, and go to state 103
    T_multiply       shift, and go to state 104
    T_LogicalAnd     shift, and go to state 105
    T_LogicalOr      shift, and go to state 106
    T_less           shift, and go to state 107
    T_less_equal     shift, and go to state 108
    T_greater        shift, and go to state 109
    T_greater_equal  shift, and go to state 110
    T_equal_equal    shift, and go to state 111
    T_not_equal      shift, and go to state 112


State 88

   33 Assignment_stmt: T_type T_identifier T_AssignmentOperator T_numericConstants .
   54 expr: T_numericConstants .

    T_closedParanthesis  reduce using rule 33 (Assignment_stmt)
    T_Semicolon          reduce using rule 33 (Assignment_stmt)
    $default             reduce using rule 54 (expr)


State 89

   32 Assignment_stmt: T_type T_identifier T_AssignmentOperator T_stringLiteral .
   55 expr: T_stringLiteral .

    T_closedParanthesis  reduce using rule 32 (Assignment_stmt)
    T_Semicolon          reduce using rule 32 (Assignment_stmt)
    $default             reduce using rule 55 (expr)


State 90

   31 Assignment_stmt: T_type T_identifier T_AssignmentOperator expr_without_constants .

    $default  reduce using rule 31 (Assignment_stmt)


State 91

   37 expr_or_empty_with_semicolon_and_assignment: Assignment_stmt T_Semicolon .

    $default  reduce using rule 37 (expr_or_empty_with_semicolon_and_assignment)


State 92

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment . expr_or_empty_with_assignment_and_closed_parent block

    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    $default  reduce using rule 71 (expr_or_empty)

    Assignment_stmt                                  go to state 113
    expr_or_empty_with_assignment_and_closed_parent  go to state 114
    expr                                             go to state 61
    expr_or_empty                                    go to state 115


State 93

   36 expr_or_empty_with_semicolon_and_assignment: expr_or_empty T_Semicolon .

    $default  reduce using rule 36 (expr_or_empty_with_semicolon_and_assignment)


State 94

   18 if_stmt: T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 116
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 117
    stmt             go to state 118
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    openflower       go to state 119
    SwitchStmt       go to state 28


State 95

   17 while_stmt: T_while T_openParenthesis expr T_closedParanthesis . block

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 116
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 120
    stmt             go to state 118
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    openflower       go to state 119
    SwitchStmt       go to state 28


State 96

   79 SwitchCaseStmt: T_case . T_intVal ':' stmt

    T_intVal  shift, and go to state 121


State 97

   80 SwitchCaseStmt: T_break . ';'

    ';'  shift, and go to state 122


State 98

   75 SwitchStmt: expr ')' '{' InnerSwitchStmt . '}'

    '}'  shift, and go to state 123


State 99

   76 InnerSwitchStmt: SwitchCaseStmt .
   77                | SwitchCaseStmt . DefaultSwitchStmt
   78 SwitchCaseStmt: SwitchCaseStmt . SwitchCaseStmt

    T_case     shift, and go to state 96
    T_break    shift, and go to state 97
    T_default  shift, and go to state 124

    $default  reduce using rule 76 (InnerSwitchStmt)

    SwitchCaseStmt     go to state 125
    DefaultSwitchStmt  go to state 126


State 100

   41 expr_without_constants: expr T_plus . expr
   57 expr: expr T_plus . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 127


State 101

   42 expr_without_constants: expr T_minus . expr
   58 expr: expr T_minus . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 128


State 102

   45 expr_without_constants: expr T_mod . expr
   61 expr: expr T_mod . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 129


State 103

   43 expr_without_constants: expr T_divide . expr
   59 expr: expr T_divide . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 130


State 104

   44 expr_without_constants: expr T_multiply . expr
   60 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 131


State 105

   46 expr_without_constants: expr T_LogicalAnd . expr
   62 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 132


State 106

   47 expr_without_constants: expr T_LogicalOr . expr
   63 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 133


State 107

   48 expr_without_constants: expr T_less . expr
   64 expr: expr T_less . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 134


State 108

   49 expr_without_constants: expr T_less_equal . expr
   65 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 135


State 109

   50 expr_without_constants: expr T_greater . expr
   66 expr: expr T_greater . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 136


State 110

   51 expr_without_constants: expr T_greater_equal . expr
   67 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 137


State 111

   52 expr_without_constants: expr T_equal_equal . expr
   68 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 138


State 112

   53 expr_without_constants: expr T_not_equal . expr
   69 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 139


State 113

   39 expr_or_empty_with_assignment_and_closed_parent: Assignment_stmt . T_closedParanthesis

    T_closedParanthesis  shift, and go to state 140


State 114

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent . block

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 116
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 141
    stmt             go to state 118
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    openflower       go to state 119
    SwitchStmt       go to state 28


State 115

   38 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty . T_closedParanthesis

    T_closedParanthesis  shift, and go to state 142


State 116

    6 block: T_Semicolon .

    $default  reduce using rule 6 (block)


State 117

   18 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 143

    T_else    [reduce using rule 22 (elseif_else_empty)]
    $default  reduce using rule 22 (elseif_else_empty)

    elseif_else_empty  go to state 144


State 118

    5 block: stmt .

    $default  reduce using rule 5 (block)


State 119

    4 block: openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    block_end_flower  go to state 145
    stmt              go to state 21
    for_stmt          go to state 22
    while_stmt        go to state 23
    if_stmt           go to state 24
    Assignment_stmt   go to state 25
    expr              go to state 26
    closeflower       go to state 27
    SwitchStmt        go to state 28


State 120

   17 while_stmt: T_while T_openParenthesis expr T_closedParanthesis block .

    $default  reduce using rule 17 (while_stmt)


State 121

   79 SwitchCaseStmt: T_case T_intVal . ':' stmt

    ':'  shift, and go to state 146


State 122

   80 SwitchCaseStmt: T_break ';' .

    $default  reduce using rule 80 (SwitchCaseStmt)


State 123

   75 SwitchStmt: expr ')' '{' InnerSwitchStmt '}' .

    $default  reduce using rule 75 (SwitchStmt)


State 124

   81 DefaultSwitchStmt: T_default . ':' stmt T_break ';'
   82                  | T_default . ':' stmt

    ':'  shift, and go to state 147


State 125

   78 SwitchCaseStmt: SwitchCaseStmt . SwitchCaseStmt
   78               | SwitchCaseStmt SwitchCaseStmt .

    T_case   shift, and go to state 96
    T_break  shift, and go to state 97

    T_case    [reduce using rule 78 (SwitchCaseStmt)]
    T_break   [reduce using rule 78 (SwitchCaseStmt)]
    $default  reduce using rule 78 (SwitchCaseStmt)

    SwitchCaseStmt  go to state 125


State 126

   77 InnerSwitchStmt: SwitchCaseStmt DefaultSwitchStmt .

    $default  reduce using rule 77 (InnerSwitchStmt)


State 127

   41 expr_without_constants: expr T_plus expr .
   57 expr: expr . T_plus expr
   57     | expr T_plus expr .
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 41 (expr_without_constants)
    T_Semicolon          reduce using rule 41 (expr_without_constants)
    $default             reduce using rule 57 (expr)


State 128

   42 expr_without_constants: expr T_minus expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   58     | expr T_minus expr .
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 42 (expr_without_constants)
    T_Semicolon          reduce using rule 42 (expr_without_constants)
    $default             reduce using rule 58 (expr)


State 129

   45 expr_without_constants: expr T_mod expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   61     | expr T_mod expr .
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 45 (expr_without_constants)
    T_Semicolon          reduce using rule 45 (expr_without_constants)
    $default             reduce using rule 61 (expr)


State 130

   43 expr_without_constants: expr T_divide expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   59     | expr T_divide expr .
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 43 (expr_without_constants)
    T_Semicolon          reduce using rule 43 (expr_without_constants)
    $default             reduce using rule 59 (expr)


State 131

   44 expr_without_constants: expr T_multiply expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   60     | expr T_multiply expr .
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 44 (expr_without_constants)
    T_Semicolon          reduce using rule 44 (expr_without_constants)
    $default             reduce using rule 60 (expr)


State 132

   46 expr_without_constants: expr T_LogicalAnd expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   62     | expr T_LogicalAnd expr .
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    T_LogicalAnd  reduce using rule 62 (expr)
    T_LogicalOr   reduce using rule 62 (expr)
    $default      reduce using rule 46 (expr_without_constants)


State 133

   47 expr_without_constants: expr T_LogicalOr expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   63     | expr T_LogicalOr expr .
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55

    T_LogicalAnd  reduce using rule 63 (expr)
    T_LogicalOr   reduce using rule 63 (expr)
    $default      reduce using rule 47 (expr_without_constants)


State 134

   48 expr_without_constants: expr T_less expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   64     | expr T_less expr .
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 48 (expr_without_constants)
    T_Semicolon          reduce using rule 48 (expr_without_constants)
    $default             reduce using rule 64 (expr)


State 135

   49 expr_without_constants: expr T_less_equal expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   65     | expr T_less_equal expr .
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 49 (expr_without_constants)
    T_Semicolon          reduce using rule 49 (expr_without_constants)
    $default             reduce using rule 65 (expr)


State 136

   50 expr_without_constants: expr T_greater expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   66     | expr T_greater expr .
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 50 (expr_without_constants)
    T_Semicolon          reduce using rule 50 (expr_without_constants)
    $default             reduce using rule 66 (expr)


State 137

   51 expr_without_constants: expr T_greater_equal expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   67     | expr T_greater_equal expr .
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 51 (expr_without_constants)
    T_Semicolon          reduce using rule 51 (expr_without_constants)
    $default             reduce using rule 67 (expr)


State 138

   52 expr_without_constants: expr T_equal_equal expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   68     | expr T_equal_equal expr .
   69     | expr . T_not_equal expr

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 52 (expr_without_constants)
    T_Semicolon          reduce using rule 52 (expr_without_constants)
    $default             reduce using rule 68 (expr)


State 139

   53 expr_without_constants: expr T_not_equal expr .
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr
   69     | expr T_not_equal expr .

    T_plus      shift, and go to state 43
    T_minus     shift, and go to state 44
    T_mod       shift, and go to state 45
    T_divide    shift, and go to state 46
    T_multiply  shift, and go to state 47

    T_closedParanthesis  reduce using rule 53 (expr_without_constants)
    T_Semicolon          reduce using rule 53 (expr_without_constants)
    $default             reduce using rule 69 (expr)


State 140

   39 expr_or_empty_with_assignment_and_closed_parent: Assignment_stmt T_closedParanthesis .

    $default  reduce using rule 39 (expr_or_empty_with_assignment_and_closed_parent)


State 141

   16 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_semicolon_and_assignment expr_or_empty_with_assignment_and_closed_parent block .

    $default  reduce using rule 16 (for_stmt)


State 142

   38 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty T_closedParanthesis .

    $default  reduce using rule 38 (expr_or_empty_with_assignment_and_closed_parent)


State 143

   19 elseif_else_empty: T_else . T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty
   20                  | T_else . Multiple_stmts_not_if
   21                  | T_else . openflower block_end_flower

    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 148
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 149
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18

    for_stmt               go to state 150
    while_stmt             go to state 151
    Multiple_stmts_not_if  go to state 152
    stmt_without_if        go to state 153
    Assignment_stmt        go to state 154
    expr                   go to state 155
    openflower             go to state 156


State 144

   18 if_stmt: T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 18 (if_stmt)


State 145

    4 block: openflower block_end_flower .

    $default  reduce using rule 4 (block)


State 146

   79 SwitchCaseStmt: T_case T_intVal ':' . stmt

    error               shift, and go to state 9
    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_for               shift, and go to state 12
    T_if                shift, and go to state 13
    T_while             shift, and go to state 14
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18
    T_switch            shift, and go to state 19

    stmt             go to state 157
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    SwitchStmt       go to state 28


State 147

   81 DefaultSwitchStmt: T_default ':' . stmt T_break ';'
   82                  | T_default ':' . stmt

    error               shift, and go to state 9
    T_int               shift, and go to state 10
    T_type              shift, and go to state 11
    T_for               shift, and go to state 12
    T_if                shift, and go to state 13
    T_while             shift, and go to state 14
    T_identifier        shift, and go to state 16
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18
    T_switch            shift, and go to state 19

    stmt             go to state 158
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    SwitchStmt       go to state 28


State 148

   19 elseif_else_empty: T_else T_if . T_openParenthesis expr T_closedParanthesis block elseif_else_empty

    T_openParenthesis  shift, and go to state 159


State 149

   24 Multiple_stmts_not_if: T_Semicolon .

    $default  reduce using rule 24 (Multiple_stmts_not_if)


State 150

   28 stmt_without_if: for_stmt .

    $default  reduce using rule 28 (stmt_without_if)


State 151

   27 stmt_without_if: while_stmt .

    $default  reduce using rule 27 (stmt_without_if)


State 152

   20 elseif_else_empty: T_else Multiple_stmts_not_if .

    $default  reduce using rule 20 (elseif_else_empty)


State 153

   23 Multiple_stmts_not_if: stmt_without_if . Multiple_stmts

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    Multiple_stmts   go to state 160
    stmt             go to state 39
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    closeflower      go to state 40
    SwitchStmt       go to state 28


State 154

   26 stmt_without_if: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 161


State 155

   25 stmt_without_if: expr . T_Semicolon
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_Semicolon      shift, and go to state 162
    T_plus           shift, and go to state 43
    T_minus          shift, and go to state 44
    T_mod            shift, and go to state 45
    T_divide         shift, and go to state 46
    T_multiply       shift, and go to state 47
    T_LogicalAnd     shift, and go to state 48
    T_LogicalOr      shift, and go to state 49
    T_less           shift, and go to state 50
    T_less_equal     shift, and go to state 51
    T_greater        shift, and go to state 52
    T_greater_equal  shift, and go to state 53
    T_equal_equal    shift, and go to state 54
    T_not_equal      shift, and go to state 55


State 156

   21 elseif_else_empty: T_else openflower . block_end_flower

    error                  shift, and go to state 9
    T_int                  shift, and go to state 10
    T_type                 shift, and go to state 11
    T_for                  shift, and go to state 12
    T_if                   shift, and go to state 13
    T_while                shift, and go to state 14
    T_closedFlowerBracket  shift, and go to state 15
    T_identifier           shift, and go to state 16
    T_numericConstants     shift, and go to state 17
    T_stringLiteral        shift, and go to state 18
    T_switch               shift, and go to state 19

    block_end_flower  go to state 163
    stmt              go to state 21
    for_stmt          go to state 22
    while_stmt        go to state 23
    if_stmt           go to state 24
    Assignment_stmt   go to state 25
    expr              go to state 26
    closeflower       go to state 27
    SwitchStmt        go to state 28


State 157

   79 SwitchCaseStmt: T_case T_intVal ':' stmt .

    $default  reduce using rule 79 (SwitchCaseStmt)


State 158

   81 DefaultSwitchStmt: T_default ':' stmt . T_break ';'
   82                  | T_default ':' stmt .

    T_break  shift, and go to state 164

    $default  reduce using rule 82 (DefaultSwitchStmt)


State 159

   19 elseif_else_empty: T_else T_if T_openParenthesis . expr T_closedParanthesis block elseif_else_empty

    T_identifier        shift, and go to state 63
    T_numericConstants  shift, and go to state 17
    T_stringLiteral     shift, and go to state 18

    expr  go to state 165


State 160

   23 Multiple_stmts_not_if: stmt_without_if Multiple_stmts .

    $default  reduce using rule 23 (Multiple_stmts_not_if)


State 161

   26 stmt_without_if: Assignment_stmt T_Semicolon .

    $default  reduce using rule 26 (stmt_without_if)


State 162

   25 stmt_without_if: expr T_Semicolon .

    $default  reduce using rule 25 (stmt_without_if)


State 163

   21 elseif_else_empty: T_else openflower block_end_flower .

    $default  reduce using rule 21 (elseif_else_empty)


State 164

   81 DefaultSwitchStmt: T_default ':' stmt T_break . ';'

    ';'  shift, and go to state 166


State 165

   19 elseif_else_empty: T_else T_if T_openParenthesis expr . T_closedParanthesis block elseif_else_empty
   57 expr: expr . T_plus expr
   58     | expr . T_minus expr
   59     | expr . T_divide expr
   60     | expr . T_multiply expr
   61     | expr . T_mod expr
   62     | expr . T_LogicalAnd expr
   63     | expr . T_LogicalOr expr
   64     | expr . T_less expr
   65     | expr . T_less_equal expr
   66     | expr . T_greater expr
   67     | expr . T_greater_equal expr
   68     | expr . T_equal_equal expr
   69     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 167
    T_plus               shift, and go to state 43
    T_minus              shift, and go to state 44
    T_mod                shift, and go to state 45
    T_divide             shift, and go to state 46
    T_multiply           shift, and go to state 47
    T_LogicalAnd         shift, and go to state 48
    T_LogicalOr          shift, and go to state 49
    T_less               shift, and go to state 50
    T_less_equal         shift, and go to state 51
    T_greater            shift, and go to state 52
    T_greater_equal      shift, and go to state 53
    T_equal_equal        shift, and go to state 54
    T_not_equal          shift, and go to state 55


State 166

   81 DefaultSwitchStmt: T_default ':' stmt T_break ';' .

    $default  reduce using rule 81 (DefaultSwitchStmt)


State 167

   19 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis . block elseif_else_empty

    error                shift, and go to state 9
    T_int                shift, and go to state 10
    T_type               shift, and go to state 11
    T_for                shift, and go to state 12
    T_if                 shift, and go to state 13
    T_while              shift, and go to state 14
    T_openFlowerBracket  shift, and go to state 7
    T_Semicolon          shift, and go to state 116
    T_identifier         shift, and go to state 16
    T_numericConstants   shift, and go to state 17
    T_stringLiteral      shift, and go to state 18
    T_switch             shift, and go to state 19

    block            go to state 168
    stmt             go to state 118
    for_stmt         go to state 22
    while_stmt       go to state 23
    if_stmt          go to state 24
    Assignment_stmt  go to state 25
    expr             go to state 26
    openflower       go to state 119
    SwitchStmt       go to state 28


State 168

   19 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block . elseif_else_empty

    T_else  shift, and go to state 143

    T_else    [reduce using rule 22 (elseif_else_empty)]
    $default  reduce using rule 22 (elseif_else_empty)

    elseif_else_empty  go to state 169


State 169

   19 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis block elseif_else_empty .

    $default  reduce using rule 19 (elseif_else_empty)
