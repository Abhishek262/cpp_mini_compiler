Grammar

    0 $accept: S $end

    1 S: START

    2 START: INCLUDE T_lt H T_gt MAIN
    3      | INCLUDE "\"" H "\"" MAIN

    4 MAIN: VOID MAINTOK BODY
    5     | INT MAINTOK BODY

    6 BODY: '{' C '}'

    7 C: C statement ';'
    8  | C LOOPS
    9  | statement ';'
   10  | LOOPS
   11  | '{' C '}'

   12 LOOPS: IF '(' COND ')' LOOPBODY ELSECHAIN
   13      | SWITCH '(' COND ')' SWITCHBODY

   14 ELSECHAIN: ELSE IF '(' COND ')' LOOPBODY ELSECHAIN
   15          | ELSE LOOPBODY
   16          | %empty

   17 LOOPBODY: '{' C '}'
   18         | ';'
   19         | statement ';'

   20 SWITCHBODY: '{' CASES '}'
   21           | ';'
   22           | statement ';'

   23 CASES: CASE CASEVAL
   24      | ';'
   25      | statement ';'
   26      | DEFAULT T_col DEFCASEC
   27      | %empty

   28 statement: ASSIGN_EXPR
   29          | ARITH_EXPR
   30          | PRINT
   31          | BREAK

   32 COND: LIT RELOP LIT
   33     | LIT
   34     | LIT RELOP LIT bin_boolop LIT RELOP LIT
   35     | un_boolop '(' LIT RELOP LIT ')'
   36     | un_boolop LIT RELOP LIT
   37     | LIT bin_boolop LIT
   38     | un_boolop '(' LIT ')'
   39     | un_boolop LIT

   40 ASSIGN_EXPR: ID T_eq ARITH_EXPR
   41            | TYPE ID T_eq ARITH_EXPR

   42 ARITH_EXPR: LIT
   43           | LIT bin_arop ARITH_EXPR
   44           | LIT bin_boolop ARITH_EXPR
   45           | LIT un_arop
   46           | un_arop ARITH_EXPR
   47           | un_boolop ARITH_EXPR

   48 PRINT: COUT T_lt T_lt STRING
   49      | COUT T_lt T_lt STRING T_lt T_lt ENDL

   50 CASEVAL: NUM T_col CASEC
   51        | STRING T_col CASEC
   52        | CHARAC T_col CASEC

   53 CASEC: C
   54      | CASE CASEVAL
   55      | C CASE CASEVAL
   56      | DEFAULT T_col DEFCASEC
   57      | C DEFAULT T_col DEFCASEC

   58 DEFCASEVAL: NUM T_col DEFCASEC
   59           | STRING T_col DEFCASEC
   60           | CHARAC T_col DEFCASEC

   61 DEFCASEC: C
   62         | CASE DEFCASEVAL
   63         | C CASE DEFCASEVAL

   64 LIT: ID
   65    | NUM

   66 TYPE: INT
   67     | CHAR
   68     | FLOAT

   69 RELOP: T_lt
   70      | T_gt
   71      | T_lteq
   72      | T_gteq
   73      | T_neq
   74      | T_eqeq

   75 bin_arop: T_pl
   76         | T_min
   77         | T_mul
   78         | T_div

   79 bin_boolop: T_and
   80           | T_or

   81 un_arop: T_incr
   82        | T_decr

   83 un_boolop: T_not


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 12 13 14 35 38
    ')' (41) 12 13 14 35 38
    ';' (59) 7 9 18 19 21 22 24 25
    '{' (123) 6 11 17 20
    '}' (125) 6 11 17 20
    error (256)
    ID (258) 40 41 64
    NUM (259) 50 58 65
    T_lt (260) 2 48 49 69
    T_gt (261) 2 70
    T_lteq (262) 71
    T_gteq (263) 72
    T_neq (264) 73
    T_eqeq (265) 74
    T_pl (266) 75
    T_min (267) 76
    T_mul (268) 77
    T_div (269) 78
    T_and (270) 79
    T_or (271) 80
    T_incr (272) 81
    T_decr (273) 82
    T_not (274) 83
    T_eq (275) 40 41
    T_col (276) 26 50 51 52 56 57 58 59 60
    SWITCH (277) 13
    CASE (278) 23 54 55 62 63
    DEFAULT (279) 26 56 57
    INT (280) 5 66
    CHAR (281) 67
    FLOAT (282) 68
    VOID (283) 4
    H (284) 2 3
    MAINTOK (285) 4 5
    INCLUDE (286) 2 3
    BREAK (287) 31
    IF (288) 12 14
    ELSE (289) 14 15
    COUT (290) 48 49
    STRING (291) 48 49 51 59
    CHARAC (292) 52 60
    ENDL (293) 49
    "\"" (294) 3


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    S (46)
        on left: 1
        on right: 0
    START (47)
        on left: 2 3
        on right: 1
    MAIN (48)
        on left: 4 5
        on right: 2 3
    BODY (49)
        on left: 6
        on right: 4 5
    C (50)
        on left: 7 8 9 10 11
        on right: 6 7 8 11 17 53 55 57 61 63
    LOOPS (51)
        on left: 12 13
        on right: 8 10
    ELSECHAIN (52)
        on left: 14 15 16
        on right: 12 14
    LOOPBODY (53)
        on left: 17 18 19
        on right: 12 14 15
    SWITCHBODY (54)
        on left: 20 21 22
        on right: 13
    CASES (55)
        on left: 23 24 25 26 27
        on right: 20
    statement (56)
        on left: 28 29 30 31
        on right: 7 9 19 22 25
    COND (57)
        on left: 32 33 34 35 36 37 38 39
        on right: 12 13 14
    ASSIGN_EXPR (58)
        on left: 40 41
        on right: 28
    ARITH_EXPR (59)
        on left: 42 43 44 45 46 47
        on right: 29 40 41 43 44 46 47
    PRINT (60)
        on left: 48 49
        on right: 30
    CASEVAL (61)
        on left: 50 51 52
        on right: 23 54 55
    CASEC (62)
        on left: 53 54 55 56 57
        on right: 50 51 52
    DEFCASEVAL (63)
        on left: 58 59 60
        on right: 62 63
    DEFCASEC (64)
        on left: 61 62 63
        on right: 26 56 57 58 59 60
    LIT (65)
        on left: 64 65
        on right: 32 33 34 35 36 37 38 39 42 43 44 45
    TYPE (66)
        on left: 66 67 68
        on right: 41
    RELOP (67)
        on left: 69 70 71 72 73 74
        on right: 32 34 35 36
    bin_arop (68)
        on left: 75 76 77 78
        on right: 43
    bin_boolop (69)
        on left: 79 80
        on right: 34 37 44
    un_arop (70)
        on left: 81 82
        on right: 45 46
    un_boolop (71)
        on left: 83
        on right: 35 36 38 39 47


State 0

    0 $accept: . S $end

    INCLUDE  shift, and go to state 1

    S      go to state 2
    START  go to state 3


State 1

    2 START: INCLUDE . T_lt H T_gt MAIN
    3      | INCLUDE . "\"" H "\"" MAIN

    T_lt  shift, and go to state 4
    "\""  shift, and go to state 5


State 2

    0 $accept: S . $end

    $end  shift, and go to state 6


State 3

    1 S: START .

    $default  reduce using rule 1 (S)


State 4

    2 START: INCLUDE T_lt . H T_gt MAIN

    H  shift, and go to state 7


State 5

    3 START: INCLUDE "\"" . H "\"" MAIN

    H  shift, and go to state 8


State 6

    0 $accept: S $end .

    $default  accept


State 7

    2 START: INCLUDE T_lt H . T_gt MAIN

    T_gt  shift, and go to state 9


State 8

    3 START: INCLUDE "\"" H . "\"" MAIN

    "\""  shift, and go to state 10


State 9

    2 START: INCLUDE T_lt H T_gt . MAIN

    INT   shift, and go to state 11
    VOID  shift, and go to state 12

    MAIN  go to state 13


State 10

    3 START: INCLUDE "\"" H "\"" . MAIN

    INT   shift, and go to state 11
    VOID  shift, and go to state 12

    MAIN  go to state 14


State 11

    5 MAIN: INT . MAINTOK BODY

    MAINTOK  shift, and go to state 15


State 12

    4 MAIN: VOID . MAINTOK BODY

    MAINTOK  shift, and go to state 16


State 13

    2 START: INCLUDE T_lt H T_gt MAIN .

    $default  reduce using rule 2 (START)


State 14

    3 START: INCLUDE "\"" H "\"" MAIN .

    $default  reduce using rule 3 (START)


State 15

    5 MAIN: INT MAINTOK . BODY

    '{'  shift, and go to state 17

    BODY  go to state 18


State 16

    4 MAIN: VOID MAINTOK . BODY

    '{'  shift, and go to state 17

    BODY  go to state 19


State 17

    6 BODY: '{' . C '}'

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 33
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 18

    5 MAIN: INT MAINTOK BODY .

    $default  reduce using rule 5 (MAIN)


State 19

    4 MAIN: VOID MAINTOK BODY .

    $default  reduce using rule 4 (MAIN)


State 20

   40 ASSIGN_EXPR: ID . T_eq ARITH_EXPR
   64 LIT: ID .

    T_eq  shift, and go to state 43

    $default  reduce using rule 64 (LIT)


State 21

   65 LIT: NUM .

    $default  reduce using rule 65 (LIT)


State 22

   81 un_arop: T_incr .

    $default  reduce using rule 81 (un_arop)


State 23

   82 un_arop: T_decr .

    $default  reduce using rule 82 (un_arop)


State 24

   83 un_boolop: T_not .

    $default  reduce using rule 83 (un_boolop)


State 25

   13 LOOPS: SWITCH . '(' COND ')' SWITCHBODY

    '('  shift, and go to state 44


State 26

   66 TYPE: INT .

    $default  reduce using rule 66 (TYPE)


State 27

   67 TYPE: CHAR .

    $default  reduce using rule 67 (TYPE)


State 28

   68 TYPE: FLOAT .

    $default  reduce using rule 68 (TYPE)


State 29

   31 statement: BREAK .

    $default  reduce using rule 31 (statement)


State 30

   12 LOOPS: IF . '(' COND ')' LOOPBODY ELSECHAIN

    '('  shift, and go to state 45


State 31

   48 PRINT: COUT . T_lt T_lt STRING
   49      | COUT . T_lt T_lt STRING T_lt T_lt ENDL

    T_lt  shift, and go to state 46


State 32

   11 C: '{' . C '}'

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 47
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 33

    6 BODY: '{' C . '}'
    7 C: C . statement ';'
    8  | C . LOOPS

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '}'     shift, and go to state 48

    LOOPS        go to state 49
    statement    go to state 50
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 34

   10 C: LOOPS .

    $default  reduce using rule 10 (C)


State 35

    9 C: statement . ';'

    ';'  shift, and go to state 51


State 36

   28 statement: ASSIGN_EXPR .

    $default  reduce using rule 28 (statement)


State 37

   29 statement: ARITH_EXPR .

    $default  reduce using rule 29 (statement)


State 38

   30 statement: PRINT .

    $default  reduce using rule 30 (statement)


State 39

   42 ARITH_EXPR: LIT .
   43           | LIT . bin_arop ARITH_EXPR
   44           | LIT . bin_boolop ARITH_EXPR
   45           | LIT . un_arop

    T_pl    shift, and go to state 52
    T_min   shift, and go to state 53
    T_mul   shift, and go to state 54
    T_div   shift, and go to state 55
    T_and   shift, and go to state 56
    T_or    shift, and go to state 57
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23

    $default  reduce using rule 42 (ARITH_EXPR)

    bin_arop    go to state 58
    bin_boolop  go to state 59
    un_arop     go to state 60


State 40

   41 ASSIGN_EXPR: TYPE . ID T_eq ARITH_EXPR

    ID  shift, and go to state 61


State 41

   46 ARITH_EXPR: un_arop . ARITH_EXPR

    ID      shift, and go to state 62
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24

    ARITH_EXPR  go to state 63
    LIT         go to state 39
    un_arop     go to state 41
    un_boolop   go to state 42


State 42

   47 ARITH_EXPR: un_boolop . ARITH_EXPR

    ID      shift, and go to state 62
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24

    ARITH_EXPR  go to state 64
    LIT         go to state 39
    un_arop     go to state 41
    un_boolop   go to state 42


State 43

   40 ASSIGN_EXPR: ID T_eq . ARITH_EXPR

    ID      shift, and go to state 62
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24

    ARITH_EXPR  go to state 65
    LIT         go to state 39
    un_arop     go to state 41
    un_boolop   go to state 42


State 44

   13 LOOPS: SWITCH '(' . COND ')' SWITCHBODY

    ID     shift, and go to state 62
    NUM    shift, and go to state 21
    T_not  shift, and go to state 24

    COND       go to state 66
    LIT        go to state 67
    un_boolop  go to state 68


State 45

   12 LOOPS: IF '(' . COND ')' LOOPBODY ELSECHAIN

    ID     shift, and go to state 62
    NUM    shift, and go to state 21
    T_not  shift, and go to state 24

    COND       go to state 69
    LIT        go to state 67
    un_boolop  go to state 68


State 46

   48 PRINT: COUT T_lt . T_lt STRING
   49      | COUT T_lt . T_lt STRING T_lt T_lt ENDL

    T_lt  shift, and go to state 70


State 47

    7 C: C . statement ';'
    8  | C . LOOPS
   11  | '{' C . '}'

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '}'     shift, and go to state 71

    LOOPS        go to state 49
    statement    go to state 50
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 48

    6 BODY: '{' C '}' .

    $default  reduce using rule 6 (BODY)


State 49

    8 C: C LOOPS .

    $default  reduce using rule 8 (C)


State 50

    7 C: C statement . ';'

    ';'  shift, and go to state 72


State 51

    9 C: statement ';' .

    $default  reduce using rule 9 (C)


State 52

   75 bin_arop: T_pl .

    $default  reduce using rule 75 (bin_arop)


State 53

   76 bin_arop: T_min .

    $default  reduce using rule 76 (bin_arop)


State 54

   77 bin_arop: T_mul .

    $default  reduce using rule 77 (bin_arop)


State 55

   78 bin_arop: T_div .

    $default  reduce using rule 78 (bin_arop)


State 56

   79 bin_boolop: T_and .

    $default  reduce using rule 79 (bin_boolop)


State 57

   80 bin_boolop: T_or .

    $default  reduce using rule 80 (bin_boolop)


State 58

   43 ARITH_EXPR: LIT bin_arop . ARITH_EXPR

    ID      shift, and go to state 62
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24

    ARITH_EXPR  go to state 73
    LIT         go to state 39
    un_arop     go to state 41
    un_boolop   go to state 42


State 59

   44 ARITH_EXPR: LIT bin_boolop . ARITH_EXPR

    ID      shift, and go to state 62
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24

    ARITH_EXPR  go to state 74
    LIT         go to state 39
    un_arop     go to state 41
    un_boolop   go to state 42


State 60

   45 ARITH_EXPR: LIT un_arop .

    $default  reduce using rule 45 (ARITH_EXPR)


State 61

   41 ASSIGN_EXPR: TYPE ID . T_eq ARITH_EXPR

    T_eq  shift, and go to state 75


State 62

   64 LIT: ID .

    $default  reduce using rule 64 (LIT)


State 63

   46 ARITH_EXPR: un_arop ARITH_EXPR .

    $default  reduce using rule 46 (ARITH_EXPR)


State 64

   47 ARITH_EXPR: un_boolop ARITH_EXPR .

    $default  reduce using rule 47 (ARITH_EXPR)


State 65

   40 ASSIGN_EXPR: ID T_eq ARITH_EXPR .

    $default  reduce using rule 40 (ASSIGN_EXPR)


State 66

   13 LOOPS: SWITCH '(' COND . ')' SWITCHBODY

    ')'  shift, and go to state 76


State 67

   32 COND: LIT . RELOP LIT
   33     | LIT .
   34     | LIT . RELOP LIT bin_boolop LIT RELOP LIT
   37     | LIT . bin_boolop LIT

    T_lt    shift, and go to state 77
    T_gt    shift, and go to state 78
    T_lteq  shift, and go to state 79
    T_gteq  shift, and go to state 80
    T_neq   shift, and go to state 81
    T_eqeq  shift, and go to state 82
    T_and   shift, and go to state 56
    T_or    shift, and go to state 57

    $default  reduce using rule 33 (COND)

    RELOP       go to state 83
    bin_boolop  go to state 84


State 68

   35 COND: un_boolop . '(' LIT RELOP LIT ')'
   36     | un_boolop . LIT RELOP LIT
   38     | un_boolop . '(' LIT ')'
   39     | un_boolop . LIT

    ID   shift, and go to state 62
    NUM  shift, and go to state 21
    '('  shift, and go to state 85

    LIT  go to state 86


State 69

   12 LOOPS: IF '(' COND . ')' LOOPBODY ELSECHAIN

    ')'  shift, and go to state 87


State 70

   48 PRINT: COUT T_lt T_lt . STRING
   49      | COUT T_lt T_lt . STRING T_lt T_lt ENDL

    STRING  shift, and go to state 88


State 71

   11 C: '{' C '}' .

    $default  reduce using rule 11 (C)


State 72

    7 C: C statement ';' .

    $default  reduce using rule 7 (C)


State 73

   43 ARITH_EXPR: LIT bin_arop ARITH_EXPR .

    $default  reduce using rule 43 (ARITH_EXPR)


State 74

   44 ARITH_EXPR: LIT bin_boolop ARITH_EXPR .

    $default  reduce using rule 44 (ARITH_EXPR)


State 75

   41 ASSIGN_EXPR: TYPE ID T_eq . ARITH_EXPR

    ID      shift, and go to state 62
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24

    ARITH_EXPR  go to state 89
    LIT         go to state 39
    un_arop     go to state 41
    un_boolop   go to state 42


State 76

   13 LOOPS: SWITCH '(' COND ')' . SWITCHBODY

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    COUT    shift, and go to state 31
    '{'     shift, and go to state 90
    ';'     shift, and go to state 91

    SWITCHBODY   go to state 92
    statement    go to state 93
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 77

   69 RELOP: T_lt .

    $default  reduce using rule 69 (RELOP)


State 78

   70 RELOP: T_gt .

    $default  reduce using rule 70 (RELOP)


State 79

   71 RELOP: T_lteq .

    $default  reduce using rule 71 (RELOP)


State 80

   72 RELOP: T_gteq .

    $default  reduce using rule 72 (RELOP)


State 81

   73 RELOP: T_neq .

    $default  reduce using rule 73 (RELOP)


State 82

   74 RELOP: T_eqeq .

    $default  reduce using rule 74 (RELOP)


State 83

   32 COND: LIT RELOP . LIT
   34     | LIT RELOP . LIT bin_boolop LIT RELOP LIT

    ID   shift, and go to state 62
    NUM  shift, and go to state 21

    LIT  go to state 94


State 84

   37 COND: LIT bin_boolop . LIT

    ID   shift, and go to state 62
    NUM  shift, and go to state 21

    LIT  go to state 95


State 85

   35 COND: un_boolop '(' . LIT RELOP LIT ')'
   38     | un_boolop '(' . LIT ')'

    ID   shift, and go to state 62
    NUM  shift, and go to state 21

    LIT  go to state 96


State 86

   36 COND: un_boolop LIT . RELOP LIT
   39     | un_boolop LIT .

    T_lt    shift, and go to state 77
    T_gt    shift, and go to state 78
    T_lteq  shift, and go to state 79
    T_gteq  shift, and go to state 80
    T_neq   shift, and go to state 81
    T_eqeq  shift, and go to state 82

    $default  reduce using rule 39 (COND)

    RELOP  go to state 97


State 87

   12 LOOPS: IF '(' COND ')' . LOOPBODY ELSECHAIN

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    COUT    shift, and go to state 31
    '{'     shift, and go to state 98
    ';'     shift, and go to state 99

    LOOPBODY     go to state 100
    statement    go to state 101
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 88

   48 PRINT: COUT T_lt T_lt STRING .
   49      | COUT T_lt T_lt STRING . T_lt T_lt ENDL

    T_lt  shift, and go to state 102

    $default  reduce using rule 48 (PRINT)


State 89

   41 ASSIGN_EXPR: TYPE ID T_eq ARITH_EXPR .

    $default  reduce using rule 41 (ASSIGN_EXPR)


State 90

   20 SWITCHBODY: '{' . CASES '}'

    ID       shift, and go to state 20
    NUM      shift, and go to state 21
    T_incr   shift, and go to state 22
    T_decr   shift, and go to state 23
    T_not    shift, and go to state 24
    CASE     shift, and go to state 103
    DEFAULT  shift, and go to state 104
    INT      shift, and go to state 26
    CHAR     shift, and go to state 27
    FLOAT    shift, and go to state 28
    BREAK    shift, and go to state 29
    COUT     shift, and go to state 31
    ';'      shift, and go to state 105

    $default  reduce using rule 27 (CASES)

    CASES        go to state 106
    statement    go to state 107
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 91

   21 SWITCHBODY: ';' .

    $default  reduce using rule 21 (SWITCHBODY)


State 92

   13 LOOPS: SWITCH '(' COND ')' SWITCHBODY .

    $default  reduce using rule 13 (LOOPS)


State 93

   22 SWITCHBODY: statement . ';'

    ';'  shift, and go to state 108


State 94

   32 COND: LIT RELOP LIT .
   34     | LIT RELOP LIT . bin_boolop LIT RELOP LIT

    T_and  shift, and go to state 56
    T_or   shift, and go to state 57

    $default  reduce using rule 32 (COND)

    bin_boolop  go to state 109


State 95

   37 COND: LIT bin_boolop LIT .

    $default  reduce using rule 37 (COND)


State 96

   35 COND: un_boolop '(' LIT . RELOP LIT ')'
   38     | un_boolop '(' LIT . ')'

    T_lt    shift, and go to state 77
    T_gt    shift, and go to state 78
    T_lteq  shift, and go to state 79
    T_gteq  shift, and go to state 80
    T_neq   shift, and go to state 81
    T_eqeq  shift, and go to state 82
    ')'     shift, and go to state 110

    RELOP  go to state 111


State 97

   36 COND: un_boolop LIT RELOP . LIT

    ID   shift, and go to state 62
    NUM  shift, and go to state 21

    LIT  go to state 112


State 98

   17 LOOPBODY: '{' . C '}'

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 113
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 99

   18 LOOPBODY: ';' .

    $default  reduce using rule 18 (LOOPBODY)


State 100

   12 LOOPS: IF '(' COND ')' LOOPBODY . ELSECHAIN

    ELSE  shift, and go to state 114

    $default  reduce using rule 16 (ELSECHAIN)

    ELSECHAIN  go to state 115


State 101

   19 LOOPBODY: statement . ';'

    ';'  shift, and go to state 116


State 102

   49 PRINT: COUT T_lt T_lt STRING T_lt . T_lt ENDL

    T_lt  shift, and go to state 117


State 103

   23 CASES: CASE . CASEVAL

    NUM     shift, and go to state 118
    STRING  shift, and go to state 119
    CHARAC  shift, and go to state 120

    CASEVAL  go to state 121


State 104

   26 CASES: DEFAULT . T_col DEFCASEC

    T_col  shift, and go to state 122


State 105

   24 CASES: ';' .

    $default  reduce using rule 24 (CASES)


State 106

   20 SWITCHBODY: '{' CASES . '}'

    '}'  shift, and go to state 123


State 107

   25 CASES: statement . ';'

    ';'  shift, and go to state 124


State 108

   22 SWITCHBODY: statement ';' .

    $default  reduce using rule 22 (SWITCHBODY)


State 109

   34 COND: LIT RELOP LIT bin_boolop . LIT RELOP LIT

    ID   shift, and go to state 62
    NUM  shift, and go to state 21

    LIT  go to state 125


State 110

   38 COND: un_boolop '(' LIT ')' .

    $default  reduce using rule 38 (COND)


State 111

   35 COND: un_boolop '(' LIT RELOP . LIT ')'

    ID   shift, and go to state 62
    NUM  shift, and go to state 21

    LIT  go to state 126


State 112

   36 COND: un_boolop LIT RELOP LIT .

    $default  reduce using rule 36 (COND)


State 113

    7 C: C . statement ';'
    8  | C . LOOPS
   17 LOOPBODY: '{' C . '}'

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '}'     shift, and go to state 127

    LOOPS        go to state 49
    statement    go to state 50
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 114

   14 ELSECHAIN: ELSE . IF '(' COND ')' LOOPBODY ELSECHAIN
   15          | ELSE . LOOPBODY

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 128
    COUT    shift, and go to state 31
    '{'     shift, and go to state 98
    ';'     shift, and go to state 99

    LOOPBODY     go to state 129
    statement    go to state 101
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 115

   12 LOOPS: IF '(' COND ')' LOOPBODY ELSECHAIN .

    $default  reduce using rule 12 (LOOPS)


State 116

   19 LOOPBODY: statement ';' .

    $default  reduce using rule 19 (LOOPBODY)


State 117

   49 PRINT: COUT T_lt T_lt STRING T_lt T_lt . ENDL

    ENDL  shift, and go to state 130


State 118

   50 CASEVAL: NUM . T_col CASEC

    T_col  shift, and go to state 131


State 119

   51 CASEVAL: STRING . T_col CASEC

    T_col  shift, and go to state 132


State 120

   52 CASEVAL: CHARAC . T_col CASEC

    T_col  shift, and go to state 133


State 121

   23 CASES: CASE CASEVAL .

    $default  reduce using rule 23 (CASES)


State 122

   26 CASES: DEFAULT T_col . DEFCASEC

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    CASE    shift, and go to state 134
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 135
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    DEFCASEC     go to state 136
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 123

   20 SWITCHBODY: '{' CASES '}' .

    $default  reduce using rule 20 (SWITCHBODY)


State 124

   25 CASES: statement ';' .

    $default  reduce using rule 25 (CASES)


State 125

   34 COND: LIT RELOP LIT bin_boolop LIT . RELOP LIT

    T_lt    shift, and go to state 77
    T_gt    shift, and go to state 78
    T_lteq  shift, and go to state 79
    T_gteq  shift, and go to state 80
    T_neq   shift, and go to state 81
    T_eqeq  shift, and go to state 82

    RELOP  go to state 137


State 126

   35 COND: un_boolop '(' LIT RELOP LIT . ')'

    ')'  shift, and go to state 138


State 127

   17 LOOPBODY: '{' C '}' .

    $default  reduce using rule 17 (LOOPBODY)


State 128

   14 ELSECHAIN: ELSE IF . '(' COND ')' LOOPBODY ELSECHAIN

    '('  shift, and go to state 139


State 129

   15 ELSECHAIN: ELSE LOOPBODY .

    $default  reduce using rule 15 (ELSECHAIN)


State 130

   49 PRINT: COUT T_lt T_lt STRING T_lt T_lt ENDL .

    $default  reduce using rule 49 (PRINT)


State 131

   50 CASEVAL: NUM T_col . CASEC

    ID       shift, and go to state 20
    NUM      shift, and go to state 21
    T_incr   shift, and go to state 22
    T_decr   shift, and go to state 23
    T_not    shift, and go to state 24
    SWITCH   shift, and go to state 25
    CASE     shift, and go to state 140
    DEFAULT  shift, and go to state 141
    INT      shift, and go to state 26
    CHAR     shift, and go to state 27
    FLOAT    shift, and go to state 28
    BREAK    shift, and go to state 29
    IF       shift, and go to state 30
    COUT     shift, and go to state 31
    '{'      shift, and go to state 32

    C            go to state 142
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    CASEC        go to state 143
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 132

   51 CASEVAL: STRING T_col . CASEC

    ID       shift, and go to state 20
    NUM      shift, and go to state 21
    T_incr   shift, and go to state 22
    T_decr   shift, and go to state 23
    T_not    shift, and go to state 24
    SWITCH   shift, and go to state 25
    CASE     shift, and go to state 140
    DEFAULT  shift, and go to state 141
    INT      shift, and go to state 26
    CHAR     shift, and go to state 27
    FLOAT    shift, and go to state 28
    BREAK    shift, and go to state 29
    IF       shift, and go to state 30
    COUT     shift, and go to state 31
    '{'      shift, and go to state 32

    C            go to state 142
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    CASEC        go to state 144
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 133

   52 CASEVAL: CHARAC T_col . CASEC

    ID       shift, and go to state 20
    NUM      shift, and go to state 21
    T_incr   shift, and go to state 22
    T_decr   shift, and go to state 23
    T_not    shift, and go to state 24
    SWITCH   shift, and go to state 25
    CASE     shift, and go to state 140
    DEFAULT  shift, and go to state 141
    INT      shift, and go to state 26
    CHAR     shift, and go to state 27
    FLOAT    shift, and go to state 28
    BREAK    shift, and go to state 29
    IF       shift, and go to state 30
    COUT     shift, and go to state 31
    '{'      shift, and go to state 32

    C            go to state 142
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    CASEC        go to state 145
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 134

   62 DEFCASEC: CASE . DEFCASEVAL

    NUM     shift, and go to state 146
    STRING  shift, and go to state 147
    CHARAC  shift, and go to state 148

    DEFCASEVAL  go to state 149


State 135

    7 C: C . statement ';'
    8  | C . LOOPS
   61 DEFCASEC: C .
   63         | C . CASE DEFCASEVAL

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    CASE    shift, and go to state 150
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31

    $default  reduce using rule 61 (DEFCASEC)

    LOOPS        go to state 49
    statement    go to state 50
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 136

   26 CASES: DEFAULT T_col DEFCASEC .

    $default  reduce using rule 26 (CASES)


State 137

   34 COND: LIT RELOP LIT bin_boolop LIT RELOP . LIT

    ID   shift, and go to state 62
    NUM  shift, and go to state 21

    LIT  go to state 151


State 138

   35 COND: un_boolop '(' LIT RELOP LIT ')' .

    $default  reduce using rule 35 (COND)


State 139

   14 ELSECHAIN: ELSE IF '(' . COND ')' LOOPBODY ELSECHAIN

    ID     shift, and go to state 62
    NUM    shift, and go to state 21
    T_not  shift, and go to state 24

    COND       go to state 152
    LIT        go to state 67
    un_boolop  go to state 68


State 140

   54 CASEC: CASE . CASEVAL

    NUM     shift, and go to state 118
    STRING  shift, and go to state 119
    CHARAC  shift, and go to state 120

    CASEVAL  go to state 153


State 141

   56 CASEC: DEFAULT . T_col DEFCASEC

    T_col  shift, and go to state 154


State 142

    7 C: C . statement ';'
    8  | C . LOOPS
   53 CASEC: C .
   55      | C . CASE CASEVAL
   57      | C . DEFAULT T_col DEFCASEC

    ID       shift, and go to state 20
    NUM      shift, and go to state 21
    T_incr   shift, and go to state 22
    T_decr   shift, and go to state 23
    T_not    shift, and go to state 24
    SWITCH   shift, and go to state 25
    CASE     shift, and go to state 155
    DEFAULT  shift, and go to state 156
    INT      shift, and go to state 26
    CHAR     shift, and go to state 27
    FLOAT    shift, and go to state 28
    BREAK    shift, and go to state 29
    IF       shift, and go to state 30
    COUT     shift, and go to state 31

    $default  reduce using rule 53 (CASEC)

    LOOPS        go to state 49
    statement    go to state 50
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 143

   50 CASEVAL: NUM T_col CASEC .

    $default  reduce using rule 50 (CASEVAL)


State 144

   51 CASEVAL: STRING T_col CASEC .

    $default  reduce using rule 51 (CASEVAL)


State 145

   52 CASEVAL: CHARAC T_col CASEC .

    $default  reduce using rule 52 (CASEVAL)


State 146

   58 DEFCASEVAL: NUM . T_col DEFCASEC

    T_col  shift, and go to state 157


State 147

   59 DEFCASEVAL: STRING . T_col DEFCASEC

    T_col  shift, and go to state 158


State 148

   60 DEFCASEVAL: CHARAC . T_col DEFCASEC

    T_col  shift, and go to state 159


State 149

   62 DEFCASEC: CASE DEFCASEVAL .

    $default  reduce using rule 62 (DEFCASEC)


State 150

   63 DEFCASEC: C CASE . DEFCASEVAL

    NUM     shift, and go to state 146
    STRING  shift, and go to state 147
    CHARAC  shift, and go to state 148

    DEFCASEVAL  go to state 160


State 151

   34 COND: LIT RELOP LIT bin_boolop LIT RELOP LIT .

    $default  reduce using rule 34 (COND)


State 152

   14 ELSECHAIN: ELSE IF '(' COND . ')' LOOPBODY ELSECHAIN

    ')'  shift, and go to state 161


State 153

   54 CASEC: CASE CASEVAL .

    $default  reduce using rule 54 (CASEC)


State 154

   56 CASEC: DEFAULT T_col . DEFCASEC

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    CASE    shift, and go to state 134
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 135
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    DEFCASEC     go to state 162
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 155

   55 CASEC: C CASE . CASEVAL

    NUM     shift, and go to state 118
    STRING  shift, and go to state 119
    CHARAC  shift, and go to state 120

    CASEVAL  go to state 163


State 156

   57 CASEC: C DEFAULT . T_col DEFCASEC

    T_col  shift, and go to state 164


State 157

   58 DEFCASEVAL: NUM T_col . DEFCASEC

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    CASE    shift, and go to state 134
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 135
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    DEFCASEC     go to state 165
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 158

   59 DEFCASEVAL: STRING T_col . DEFCASEC

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    CASE    shift, and go to state 134
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 135
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    DEFCASEC     go to state 166
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 159

   60 DEFCASEVAL: CHARAC T_col . DEFCASEC

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    CASE    shift, and go to state 134
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 135
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    DEFCASEC     go to state 167
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 160

   63 DEFCASEC: C CASE DEFCASEVAL .

    $default  reduce using rule 63 (DEFCASEC)


State 161

   14 ELSECHAIN: ELSE IF '(' COND ')' . LOOPBODY ELSECHAIN

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    COUT    shift, and go to state 31
    '{'     shift, and go to state 98
    ';'     shift, and go to state 99

    LOOPBODY     go to state 168
    statement    go to state 101
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 162

   56 CASEC: DEFAULT T_col DEFCASEC .

    $default  reduce using rule 56 (CASEC)


State 163

   55 CASEC: C CASE CASEVAL .

    $default  reduce using rule 55 (CASEC)


State 164

   57 CASEC: C DEFAULT T_col . DEFCASEC

    ID      shift, and go to state 20
    NUM     shift, and go to state 21
    T_incr  shift, and go to state 22
    T_decr  shift, and go to state 23
    T_not   shift, and go to state 24
    SWITCH  shift, and go to state 25
    CASE    shift, and go to state 134
    INT     shift, and go to state 26
    CHAR    shift, and go to state 27
    FLOAT   shift, and go to state 28
    BREAK   shift, and go to state 29
    IF      shift, and go to state 30
    COUT    shift, and go to state 31
    '{'     shift, and go to state 32

    C            go to state 135
    LOOPS        go to state 34
    statement    go to state 35
    ASSIGN_EXPR  go to state 36
    ARITH_EXPR   go to state 37
    PRINT        go to state 38
    DEFCASEC     go to state 169
    LIT          go to state 39
    TYPE         go to state 40
    un_arop      go to state 41
    un_boolop    go to state 42


State 165

   58 DEFCASEVAL: NUM T_col DEFCASEC .

    $default  reduce using rule 58 (DEFCASEVAL)


State 166

   59 DEFCASEVAL: STRING T_col DEFCASEC .

    $default  reduce using rule 59 (DEFCASEVAL)


State 167

   60 DEFCASEVAL: CHARAC T_col DEFCASEC .

    $default  reduce using rule 60 (DEFCASEVAL)


State 168

   14 ELSECHAIN: ELSE IF '(' COND ')' LOOPBODY . ELSECHAIN

    ELSE  shift, and go to state 114

    $default  reduce using rule 16 (ELSECHAIN)

    ELSECHAIN  go to state 170


State 169

   57 CASEC: C DEFAULT T_col DEFCASEC .

    $default  reduce using rule 57 (CASEC)


State 170

   14 ELSECHAIN: ELSE IF '(' COND ')' LOOPBODY ELSECHAIN .

    $default  reduce using rule 14 (ELSECHAIN)
