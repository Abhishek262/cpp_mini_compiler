Nonterminals useless in grammar

    input


Terminals unused in grammar

    T_keyword
    T_return
    T_InputStream
    T_RelationalOperator
    T_LogicalOperator
    T_UnaryOperator
    T_floatValE
    T_cin
    T_whiteSpace
    T_LogicalNot


Rules useless in grammar

  119 statement: input

  120 input: T_cin input


State 140 conflicts: 1 shift/reduce
State 216 conflicts: 1 shift/reduce


Grammar

    0 $accept: S $end

    1 S: Start

    2 Start: T_include Start
    3      | T_include T_namespace Start
    4      | Main

    5 Main: T_type T_main T_openParenthesis T_closedParanthesis Body

    6 Body: openflower block_end_flower

    7 block_end_flower: stmt Multiple_stmts
    8                 | closeflower

    9 block: openflower block_end_flower
   10      | stmt
   11      | T_Semicolon

   12 Multiple_stmts: stmt Multiple_stmts
   13               | closeflower

   14 stmt: expr T_Semicolon
   15     | if_stmt
   16     | while_stmt
   17     | for_stmt
   18     | switch_stmt
   19     | Assignment_stmt T_Semicolon
   20     | error T_Semicolon

   21 $@1: %empty

   22 $@2: %empty

   23 $@3: %empty

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent $@3 block

   25 $@4: %empty

   26 $@5: %empty

   27 while_stmt: T_while $@4 T_openParenthesis expr T_closedParanthesis $@5 block

   28 $@6: %empty

   29 if_stmt: T_if T_openParenthesis expr T_closedParanthesis $@6 block elseif_else_empty

   30 $@7: %empty

   31 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis $@7 block elseif_else_empty

   32 $@8: %empty

   33 elseif_else_empty: T_else $@8 Multiple_stmts_not_if

   34 $@9: %empty

   35 elseif_else_empty: T_else $@9 openflower block_end_flower
   36                  | %empty

   37 Multiple_stmts_not_if: stmt_without_if Multiple_stmts
   38                      | T_Semicolon

   39 stmt_without_if: expr T_Semicolon
   40                | Assignment_stmt T_Semicolon
   41                | while_stmt
   42                | for_stmt

   43 switch_stmt: T_switch T_openParenthesis expr T_closedParanthesis switch_body

   44 statement: Assignment_stmt
   45          | expr
   46          | print
   47          | T_break

   48 switch_body: T_openFlowerBracket cases T_closedFlowerBracket
   49            | T_Semicolon
   50            | statement T_Semicolon

   51 cases: T_case caseval
   52      | T_Semicolon
   53      | statement T_Semicolon
   54      | T_default T_colon defcasec
   55      | %empty

   56 caseval: LIT T_colon casec

   57 casec: Multiple_stmts
   58      | T_case caseval
   59      | Multiple_stmts T_case caseval
   60      | T_default T_colon defcasec
   61      | Multiple_stmts T_default T_colon defcasec

   62 defcaseval: LIT T_colon defcasec

   63 defcasec: Multiple_stmts
   64         | T_case defcaseval
   65         | Multiple_stmts T_case defcaseval

   66 Assignment_stmt: idid T_AssignmentOperator expr
   67                | idid T_shortHand expr
   68                | T_type idid T_AssignmentOperator expr_without_constants
   69                | T_type idid T_AssignmentOperator sc
   70                | T_type idid T_AssignmentOperator nc

   71 print: T_cout T_OutputStream T_stringLiteral
   72      | T_cout T_OutputStream T_stringLiteral T_OutputStream T_endl

   73 expr_without_constants: idid
   74                       | expr T_plus expr
   75                       | expr T_minus expr
   76                       | expr T_divide expr
   77                       | expr T_multiply expr
   78                       | expr T_mod expr
   79                       | expr T_LogicalAnd expr
   80                       | expr T_LogicalOr expr
   81                       | expr T_less expr
   82                       | expr T_less_equal expr
   83                       | expr T_greater expr
   84                       | expr T_greater_equal expr
   85                       | expr T_equal_equal expr
   86                       | expr T_not_equal expr

   87 expr: nc
   88     | sc
   89     | idid
   90     | expr T_plus expr
   91     | expr T_minus expr
   92     | expr T_divide expr
   93     | expr T_multiply expr
   94     | expr T_mod expr
   95     | expr T_LogicalAnd expr
   96     | expr T_LogicalOr expr
   97     | expr T_less expr
   98     | expr T_less_equal expr
   99     | expr T_greater expr
  100     | expr T_greater_equal expr
  101     | expr T_equal_equal expr
  102     | expr T_not_equal expr

  103 LIT: T_identifier
  104    | T_numericConstants
  105    | T_floatVal
  106    | T_stringLiteral
  107    | T_character

  108 expr_or_empty_with_semicolon_and_assignment: expr_or_empty T_Semicolon
  109                                            | Assignment_stmt T_Semicolon

  110 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty T_closedParanthesis
  111                                                | Assignment_stmt T_closedParanthesis

  112 idid: T_identifier

  113 sc: T_stringLiteral

  114 nc: T_numericConstants

  115 expr_or_empty: expr
  116              | %empty

  117 openflower: T_openFlowerBracket

  118 closeflower: T_closedFlowerBracket


Terminals, with rules where they appear

    $end (0) 0
    error <str> (256) 20
    T_keyword <str> (258)
    T_main <str> (259) 5
    T_type <str> (260) 5 68 69 70
    T_return <str> (261)
    T_for <str> (262) 24
    T_if <str> (263) 29 31
    T_else <str> (264) 31 33 35
    T_while <str> (265) 27
    T_InputStream <str> (266)
    T_OutputStream <str> (267) 71 72
    T_openParenthesis <str> (268) 5 24 27 29 31 43
    T_closedParanthesis <str> (269) 5 27 29 31 43 110 111
    T_openFlowerBracket <str> (270) 48 117
    T_closedFlowerBracket <str> (271) 48 118
    T_RelationalOperator <str> (272)
    T_LogicalOperator <str> (273)
    T_UnaryOperator <str> (274)
    T_AssignmentOperator <str> (275) 66 68 69 70
    T_Semicolon <str> (276) 11 14 19 20 38 39 40 49 50 52 53 108 109
    T_identifier <str> (277) 103 112
    T_numericConstants <str> (278) 104 114
    T_stringLiteral <str> (279) 71 72 106 113
    T_floatVal <str> (280) 105
    T_floatValE <str> (281)
    T_character <str> (282) 107
    T_plus <str> (283) 74 90
    T_minus <str> (284) 75 91
    T_mod <str> (285) 78 94
    T_divide <str> (286) 76 92
    T_multiply <str> (287) 77 93
    T_switch <str> (288) 43
    T_case <str> (289) 51 58 59 64 65
    T_break <str> (290) 47
    T_default <str> (291) 54 60 61
    T_include <str> (292) 2 3
    T_cout <str> (293) 71 72
    T_cin <str> (294)
    T_endl <str> (295) 72
    T_colon <str> (296) 54 56 60 61 62
    T_whiteSpace <str> (297)
    T_shortHand <str> (298) 67
    T_namespace <str> (299) 3
    T_LogicalAnd (300) 79 95
    T_LogicalOr (301) 80 96
    T_LogicalNot (302)
    T_less (303) 81 97
    T_less_equal (304) 82 98
    T_greater (305) 83 99
    T_greater_equal (306) 84 100
    T_equal_equal (307) 85 101
    T_not_equal (308) 86 102


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    S <NODE> (55)
        on left: 1
        on right: 0
    Start <NODE> (56)
        on left: 2 3 4
        on right: 1 2 3
    Main <NODE> (57)
        on left: 5
        on right: 4
    Body <NODE> (58)
        on left: 6
        on right: 5
    block_end_flower <NODE> (59)
        on left: 7 8
        on right: 6 9 35
    block <NODE> (60)
        on left: 9 10 11
        on right: 24 27 29 31
    Multiple_stmts <NODE> (61)
        on left: 12 13
        on right: 7 12 37 57 59 61 63 65
    stmt <NODE> (62)
        on left: 14 15 16 17 18 19 20
        on right: 7 10 12
    for_stmt <NODE> (63)
        on left: 24
        on right: 17 42
    $@1 (64)
        on left: 21
        on right: 24
    $@2 (65)
        on left: 22
        on right: 24
    $@3 (66)
        on left: 23
        on right: 24
    while_stmt <NODE> (67)
        on left: 27
        on right: 16 41
    $@4 (68)
        on left: 25
        on right: 27
    $@5 (69)
        on left: 26
        on right: 27
    if_stmt <NODE> (70)
        on left: 29
        on right: 15
    $@6 (71)
        on left: 28
        on right: 29
    elseif_else_empty <NODE> (72)
        on left: 31 33 35 36
        on right: 29 31
    $@7 (73)
        on left: 30
        on right: 31
    $@8 (74)
        on left: 32
        on right: 33
    $@9 (75)
        on left: 34
        on right: 35
    Multiple_stmts_not_if <NODE> (76)
        on left: 37 38
        on right: 33
    stmt_without_if <NODE> (77)
        on left: 39 40 41 42
        on right: 37
    switch_stmt (78)
        on left: 43
        on right: 18
    statement (79)
        on left: 44 45 46 47
        on right: 50 53
    switch_body (80)
        on left: 48 49 50
        on right: 43
    cases (81)
        on left: 51 52 53 54 55
        on right: 48
    caseval (82)
        on left: 56
        on right: 51 58 59
    casec (83)
        on left: 57 58 59 60 61
        on right: 56
    defcaseval (84)
        on left: 62
        on right: 64 65
    defcasec (85)
        on left: 63 64 65
        on right: 54 60 61 62
    Assignment_stmt <NODE> (86)
        on left: 66 67 68 69 70
        on right: 19 40 44 109 111
    print (87)
        on left: 71 72
        on right: 46
    expr_without_constants <NODE> (88)
        on left: 73 74 75 76 77 78 79 80 81 82 83 84 85 86
        on right: 68
    expr <NODE> (89)
        on left: 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102
        on right: 14 27 29 31 39 43 45 66 67 74 75 76 77 78 79 80 81 82 83 84 85 86 90 91 92 93 94 95 96 97 98 99 100 101 102 115
    LIT (90)
        on left: 103 104 105 106 107
        on right: 56 62
    expr_or_empty_with_semicolon_and_assignment <NODE> (91)
        on left: 108 109
        on right: 24
    expr_or_empty_with_assignment_and_closed_parent <NODE> (92)
        on left: 110 111
        on right: 24
    idid <NODE> (93)
        on left: 112
        on right: 66 67 68 69 70 73 89
    sc <NODE> (94)
        on left: 113
        on right: 69 88
    nc <NODE> (95)
        on left: 114
        on right: 70 87
    expr_or_empty <NODE> (96)
        on left: 115 116
        on right: 108 110
    openflower (97)
        on left: 117
        on right: 6 9 35
    closeflower <NODE> (98)
        on left: 118
        on right: 8 13


State 0

    0 $accept: . S $end

    T_type     shift, and go to state 1
    T_include  shift, and go to state 2

    S      go to state 3
    Start  go to state 4
    Main   go to state 5


State 1

    5 Main: T_type . T_main T_openParenthesis T_closedParanthesis Body

    T_main  shift, and go to state 6


State 2

    2 Start: T_include . Start
    3      | T_include . T_namespace Start

    T_type       shift, and go to state 1
    T_include    shift, and go to state 2
    T_namespace  shift, and go to state 7

    Start  go to state 8
    Main   go to state 5


State 3

    0 $accept: S . $end

    $end  shift, and go to state 9


State 4

    1 S: Start .

    $default  reduce using rule 1 (S)


State 5

    4 Start: Main .

    $default  reduce using rule 4 (Start)


State 6

    5 Main: T_type T_main . T_openParenthesis T_closedParanthesis Body

    T_openParenthesis  shift, and go to state 10


State 7

    3 Start: T_include T_namespace . Start

    T_type     shift, and go to state 1
    T_include  shift, and go to state 2

    Start  go to state 11
    Main   go to state 5


State 8

    2 Start: T_include Start .

    $default  reduce using rule 2 (Start)


State 9

    0 $accept: S $end .

    $default  accept


State 10

    5 Main: T_type T_main T_openParenthesis . T_closedParanthesis Body

    T_closedParanthesis  shift, and go to state 12


State 11

    3 Start: T_include T_namespace Start .

    $default  reduce using rule 3 (Start)


State 12

    5 Main: T_type T_main T_openParenthesis T_closedParanthesis . Body

    T_openFlowerBracket  shift, and go to state 13

    Body        go to state 14
    openflower  go to state 15


State 13

  117 openflower: T_openFlowerBracket .

    $default  reduce using rule 117 (openflower)


State 14

    5 Main: T_type T_main T_openParenthesis T_closedParanthesis Body .

    $default  reduce using rule 5 (Main)


State 15

    6 Body: openflower . block_end_flower

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25

    block_end_flower  go to state 26
    stmt              go to state 27
    for_stmt          go to state 28
    while_stmt        go to state 29
    if_stmt           go to state 30
    switch_stmt       go to state 31
    Assignment_stmt   go to state 32
    expr              go to state 33
    idid              go to state 34
    sc                go to state 35
    nc                go to state 36
    closeflower       go to state 37


State 16

   20 stmt: error . T_Semicolon

    T_Semicolon  shift, and go to state 38


State 17

   68 Assignment_stmt: T_type . idid T_AssignmentOperator expr_without_constants
   69                | T_type . idid T_AssignmentOperator sc
   70                | T_type . idid T_AssignmentOperator nc

    T_identifier  shift, and go to state 22

    idid  go to state 39


State 18

   24 for_stmt: T_for . T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent $@3 block

    T_openParenthesis  shift, and go to state 40


State 19

   29 if_stmt: T_if . T_openParenthesis expr T_closedParanthesis $@6 block elseif_else_empty

    T_openParenthesis  shift, and go to state 41


State 20

   27 while_stmt: T_while . $@4 T_openParenthesis expr T_closedParanthesis $@5 block

    $default  reduce using rule 25 ($@4)

    $@4  go to state 42


State 21

  118 closeflower: T_closedFlowerBracket .

    $default  reduce using rule 118 (closeflower)


State 22

  112 idid: T_identifier .

    $default  reduce using rule 112 (idid)


State 23

  114 nc: T_numericConstants .

    $default  reduce using rule 114 (nc)


State 24

  113 sc: T_stringLiteral .

    $default  reduce using rule 113 (sc)


State 25

   43 switch_stmt: T_switch . T_openParenthesis expr T_closedParanthesis switch_body

    T_openParenthesis  shift, and go to state 43


State 26

    6 Body: openflower block_end_flower .

    $default  reduce using rule 6 (Body)


State 27

    7 block_end_flower: stmt . Multiple_stmts

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25

    Multiple_stmts   go to state 44
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 28

   17 stmt: for_stmt .

    $default  reduce using rule 17 (stmt)


State 29

   16 stmt: while_stmt .

    $default  reduce using rule 16 (stmt)


State 30

   15 stmt: if_stmt .

    $default  reduce using rule 15 (stmt)


State 31

   18 stmt: switch_stmt .

    $default  reduce using rule 18 (stmt)


State 32

   19 stmt: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 47


State 33

   14 stmt: expr . T_Semicolon
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_Semicolon      shift, and go to state 48
    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_LogicalAnd     shift, and go to state 54
    T_LogicalOr      shift, and go to state 55
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61


State 34

   66 Assignment_stmt: idid . T_AssignmentOperator expr
   67                | idid . T_shortHand expr
   89 expr: idid .

    T_AssignmentOperator  shift, and go to state 62
    T_shortHand           shift, and go to state 63

    $default  reduce using rule 89 (expr)


State 35

   88 expr: sc .

    $default  reduce using rule 88 (expr)


State 36

   87 expr: nc .

    $default  reduce using rule 87 (expr)


State 37

    8 block_end_flower: closeflower .

    $default  reduce using rule 8 (block_end_flower)


State 38

   20 stmt: error T_Semicolon .

    $default  reduce using rule 20 (stmt)


State 39

   68 Assignment_stmt: T_type idid . T_AssignmentOperator expr_without_constants
   69                | T_type idid . T_AssignmentOperator sc
   70                | T_type idid . T_AssignmentOperator nc

    T_AssignmentOperator  shift, and go to state 64


State 40

   24 for_stmt: T_for T_openParenthesis . expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent $@3 block

    T_type              shift, and go to state 17
    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    $default  reduce using rule 116 (expr_or_empty)

    Assignment_stmt                              go to state 65
    expr                                         go to state 66
    expr_or_empty_with_semicolon_and_assignment  go to state 67
    idid                                         go to state 34
    sc                                           go to state 35
    nc                                           go to state 36
    expr_or_empty                                go to state 68


State 41

   29 if_stmt: T_if T_openParenthesis . expr T_closedParanthesis $@6 block elseif_else_empty

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 69
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 42

   27 while_stmt: T_while $@4 . T_openParenthesis expr T_closedParanthesis $@5 block

    T_openParenthesis  shift, and go to state 71


State 43

   43 switch_stmt: T_switch T_openParenthesis . expr T_closedParanthesis switch_body

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 72
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 44

    7 block_end_flower: stmt Multiple_stmts .

    $default  reduce using rule 7 (block_end_flower)


State 45

   12 Multiple_stmts: stmt . Multiple_stmts

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25

    Multiple_stmts   go to state 73
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 46

   13 Multiple_stmts: closeflower .

    $default  reduce using rule 13 (Multiple_stmts)


State 47

   19 stmt: Assignment_stmt T_Semicolon .

    $default  reduce using rule 19 (stmt)


State 48

   14 stmt: expr T_Semicolon .

    $default  reduce using rule 14 (stmt)


State 49

   90 expr: expr T_plus . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 74
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 50

   91 expr: expr T_minus . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 75
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 51

   94 expr: expr T_mod . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 76
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 52

   92 expr: expr T_divide . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 77
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 53

   93 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 78
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 54

   95 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 79
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 55

   96 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 80
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 56

   97 expr: expr T_less . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 81
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 57

   98 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 82
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 58

   99 expr: expr T_greater . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 83
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 59

  100 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 84
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 60

  101 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 85
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 61

  102 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 86
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 62

   66 Assignment_stmt: idid T_AssignmentOperator . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 87
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 63

   67 Assignment_stmt: idid T_shortHand . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 88
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 64

   68 Assignment_stmt: T_type idid T_AssignmentOperator . expr_without_constants
   69                | T_type idid T_AssignmentOperator . sc
   70                | T_type idid T_AssignmentOperator . nc

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr_without_constants  go to state 89
    expr                    go to state 90
    idid                    go to state 91
    sc                      go to state 92
    nc                      go to state 93


State 65

  109 expr_or_empty_with_semicolon_and_assignment: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 94


State 66

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr
  115 expr_or_empty: expr .

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_LogicalAnd     shift, and go to state 54
    T_LogicalOr      shift, and go to state 55
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    $default  reduce using rule 115 (expr_or_empty)


State 67

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment . $@1 expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent $@3 block

    $default  reduce using rule 21 ($@1)

    $@1  go to state 95


State 68

  108 expr_or_empty_with_semicolon_and_assignment: expr_or_empty . T_Semicolon

    T_Semicolon  shift, and go to state 96


State 69

   29 if_stmt: T_if T_openParenthesis expr . T_closedParanthesis $@6 block elseif_else_empty
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 97
    T_plus               shift, and go to state 49
    T_minus              shift, and go to state 50
    T_mod                shift, and go to state 51
    T_divide             shift, and go to state 52
    T_multiply           shift, and go to state 53
    T_LogicalAnd         shift, and go to state 54
    T_LogicalOr          shift, and go to state 55
    T_less               shift, and go to state 56
    T_less_equal         shift, and go to state 57
    T_greater            shift, and go to state 58
    T_greater_equal      shift, and go to state 59
    T_equal_equal        shift, and go to state 60
    T_not_equal          shift, and go to state 61


State 70

   89 expr: idid .

    $default  reduce using rule 89 (expr)


State 71

   27 while_stmt: T_while $@4 T_openParenthesis . expr T_closedParanthesis $@5 block

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 98
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 72

   43 switch_stmt: T_switch T_openParenthesis expr . T_closedParanthesis switch_body
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 99
    T_plus               shift, and go to state 49
    T_minus              shift, and go to state 50
    T_mod                shift, and go to state 51
    T_divide             shift, and go to state 52
    T_multiply           shift, and go to state 53
    T_LogicalAnd         shift, and go to state 54
    T_LogicalOr          shift, and go to state 55
    T_less               shift, and go to state 56
    T_less_equal         shift, and go to state 57
    T_greater            shift, and go to state 58
    T_greater_equal      shift, and go to state 59
    T_equal_equal        shift, and go to state 60
    T_not_equal          shift, and go to state 61


State 73

   12 Multiple_stmts: stmt Multiple_stmts .

    $default  reduce using rule 12 (Multiple_stmts)


State 74

   90 expr: expr . T_plus expr
   90     | expr T_plus expr .
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 90 (expr)


State 75

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   91     | expr T_minus expr .
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 91 (expr)


State 76

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   94     | expr T_mod expr .
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    $default  reduce using rule 94 (expr)


State 77

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   92     | expr T_divide expr .
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    $default  reduce using rule 92 (expr)


State 78

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   93     | expr T_multiply expr .
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    $default  reduce using rule 93 (expr)


State 79

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   95     | expr T_LogicalAnd expr .
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    $default  reduce using rule 95 (expr)


State 80

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   96     | expr T_LogicalOr expr .
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    $default  reduce using rule 96 (expr)


State 81

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   97     | expr T_less expr .
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 97 (expr)


State 82

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   98     | expr T_less_equal expr .
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 98 (expr)


State 83

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
   99     | expr T_greater expr .
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 99 (expr)


State 84

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  100     | expr T_greater_equal expr .
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 100 (expr)


State 85

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  101     | expr T_equal_equal expr .
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 101 (expr)


State 86

   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr
  102     | expr T_not_equal expr .

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    $default  reduce using rule 102 (expr)


State 87

   66 Assignment_stmt: idid T_AssignmentOperator expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_LogicalAnd     shift, and go to state 54
    T_LogicalOr      shift, and go to state 55
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    $default  reduce using rule 66 (Assignment_stmt)


State 88

   67 Assignment_stmt: idid T_shortHand expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_LogicalAnd     shift, and go to state 54
    T_LogicalOr      shift, and go to state 55
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    $default  reduce using rule 67 (Assignment_stmt)


State 89

   68 Assignment_stmt: T_type idid T_AssignmentOperator expr_without_constants .

    $default  reduce using rule 68 (Assignment_stmt)


State 90

   74 expr_without_constants: expr . T_plus expr
   75                       | expr . T_minus expr
   76                       | expr . T_divide expr
   77                       | expr . T_multiply expr
   78                       | expr . T_mod expr
   79                       | expr . T_LogicalAnd expr
   80                       | expr . T_LogicalOr expr
   81                       | expr . T_less expr
   82                       | expr . T_less_equal expr
   83                       | expr . T_greater expr
   84                       | expr . T_greater_equal expr
   85                       | expr . T_equal_equal expr
   86                       | expr . T_not_equal expr
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 100
    T_minus          shift, and go to state 101
    T_mod            shift, and go to state 102
    T_divide         shift, and go to state 103
    T_multiply       shift, and go to state 104
    T_LogicalAnd     shift, and go to state 105
    T_LogicalOr      shift, and go to state 106
    T_less           shift, and go to state 107
    T_less_equal     shift, and go to state 108
    T_greater        shift, and go to state 109
    T_greater_equal  shift, and go to state 110
    T_equal_equal    shift, and go to state 111
    T_not_equal      shift, and go to state 112


State 91

   73 expr_without_constants: idid .
   89 expr: idid .

    T_closedParanthesis  reduce using rule 73 (expr_without_constants)
    T_Semicolon          reduce using rule 73 (expr_without_constants)
    $default             reduce using rule 89 (expr)


State 92

   69 Assignment_stmt: T_type idid T_AssignmentOperator sc .
   88 expr: sc .

    T_closedParanthesis  reduce using rule 69 (Assignment_stmt)
    T_Semicolon          reduce using rule 69 (Assignment_stmt)
    $default             reduce using rule 88 (expr)


State 93

   70 Assignment_stmt: T_type idid T_AssignmentOperator nc .
   87 expr: nc .

    T_closedParanthesis  reduce using rule 70 (Assignment_stmt)
    T_Semicolon          reduce using rule 70 (Assignment_stmt)
    $default             reduce using rule 87 (expr)


State 94

  109 expr_or_empty_with_semicolon_and_assignment: Assignment_stmt T_Semicolon .

    $default  reduce using rule 109 (expr_or_empty_with_semicolon_and_assignment)


State 95

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 . expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent $@3 block

    T_type              shift, and go to state 17
    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    $default  reduce using rule 116 (expr_or_empty)

    Assignment_stmt                              go to state 65
    expr                                         go to state 66
    expr_or_empty_with_semicolon_and_assignment  go to state 113
    idid                                         go to state 34
    sc                                           go to state 35
    nc                                           go to state 36
    expr_or_empty                                go to state 68


State 96

  108 expr_or_empty_with_semicolon_and_assignment: expr_or_empty T_Semicolon .

    $default  reduce using rule 108 (expr_or_empty_with_semicolon_and_assignment)


State 97

   29 if_stmt: T_if T_openParenthesis expr T_closedParanthesis . $@6 block elseif_else_empty

    $default  reduce using rule 28 ($@6)

    $@6  go to state 114


State 98

   27 while_stmt: T_while $@4 T_openParenthesis expr . T_closedParanthesis $@5 block
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 115
    T_plus               shift, and go to state 49
    T_minus              shift, and go to state 50
    T_mod                shift, and go to state 51
    T_divide             shift, and go to state 52
    T_multiply           shift, and go to state 53
    T_LogicalAnd         shift, and go to state 54
    T_LogicalOr          shift, and go to state 55
    T_less               shift, and go to state 56
    T_less_equal         shift, and go to state 57
    T_greater            shift, and go to state 58
    T_greater_equal      shift, and go to state 59
    T_equal_equal        shift, and go to state 60
    T_not_equal          shift, and go to state 61


State 99

   43 switch_stmt: T_switch T_openParenthesis expr T_closedParanthesis . switch_body

    T_type               shift, and go to state 17
    T_openFlowerBracket  shift, and go to state 116
    T_Semicolon          shift, and go to state 117
    T_identifier         shift, and go to state 22
    T_numericConstants   shift, and go to state 23
    T_stringLiteral      shift, and go to state 24
    T_break              shift, and go to state 118
    T_cout               shift, and go to state 119

    statement        go to state 120
    switch_body      go to state 121
    Assignment_stmt  go to state 122
    print            go to state 123
    expr             go to state 124
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36


State 100

   74 expr_without_constants: expr T_plus . expr
   90 expr: expr T_plus . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 125
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 101

   75 expr_without_constants: expr T_minus . expr
   91 expr: expr T_minus . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 126
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 102

   78 expr_without_constants: expr T_mod . expr
   94 expr: expr T_mod . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 127
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 103

   76 expr_without_constants: expr T_divide . expr
   92 expr: expr T_divide . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 128
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 104

   77 expr_without_constants: expr T_multiply . expr
   93 expr: expr T_multiply . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 129
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 105

   79 expr_without_constants: expr T_LogicalAnd . expr
   95 expr: expr T_LogicalAnd . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 130
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 106

   80 expr_without_constants: expr T_LogicalOr . expr
   96 expr: expr T_LogicalOr . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 131
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 107

   81 expr_without_constants: expr T_less . expr
   97 expr: expr T_less . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 132
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 108

   82 expr_without_constants: expr T_less_equal . expr
   98 expr: expr T_less_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 133
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 109

   83 expr_without_constants: expr T_greater . expr
   99 expr: expr T_greater . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 134
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 110

   84 expr_without_constants: expr T_greater_equal . expr
  100 expr: expr T_greater_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 135
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 111

   85 expr_without_constants: expr T_equal_equal . expr
  101 expr: expr T_equal_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 136
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 112

   86 expr_without_constants: expr T_not_equal . expr
  102 expr: expr T_not_equal . expr

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 137
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 113

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment . $@2 expr_or_empty_with_assignment_and_closed_parent $@3 block

    $default  reduce using rule 22 ($@2)

    $@2  go to state 138


State 114

   29 if_stmt: T_if T_openParenthesis expr T_closedParanthesis $@6 . block elseif_else_empty

    error                shift, and go to state 16
    T_type               shift, and go to state 17
    T_for                shift, and go to state 18
    T_if                 shift, and go to state 19
    T_while              shift, and go to state 20
    T_openFlowerBracket  shift, and go to state 13
    T_Semicolon          shift, and go to state 139
    T_identifier         shift, and go to state 22
    T_numericConstants   shift, and go to state 23
    T_stringLiteral      shift, and go to state 24
    T_switch             shift, and go to state 25

    block            go to state 140
    stmt             go to state 141
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    openflower       go to state 142


State 115

   27 while_stmt: T_while $@4 T_openParenthesis expr T_closedParanthesis . $@5 block

    $default  reduce using rule 26 ($@5)

    $@5  go to state 143


State 116

   48 switch_body: T_openFlowerBracket . cases T_closedFlowerBracket

    T_type              shift, and go to state 17
    T_Semicolon         shift, and go to state 144
    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24
    T_case              shift, and go to state 145
    T_break             shift, and go to state 118
    T_default           shift, and go to state 146
    T_cout              shift, and go to state 119

    $default  reduce using rule 55 (cases)

    statement        go to state 147
    cases            go to state 148
    Assignment_stmt  go to state 122
    print            go to state 123
    expr             go to state 124
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36


State 117

   49 switch_body: T_Semicolon .

    $default  reduce using rule 49 (switch_body)


State 118

   47 statement: T_break .

    $default  reduce using rule 47 (statement)


State 119

   71 print: T_cout . T_OutputStream T_stringLiteral
   72      | T_cout . T_OutputStream T_stringLiteral T_OutputStream T_endl

    T_OutputStream  shift, and go to state 149


State 120

   50 switch_body: statement . T_Semicolon

    T_Semicolon  shift, and go to state 150


State 121

   43 switch_stmt: T_switch T_openParenthesis expr T_closedParanthesis switch_body .

    $default  reduce using rule 43 (switch_stmt)


State 122

   44 statement: Assignment_stmt .

    $default  reduce using rule 44 (statement)


State 123

   46 statement: print .

    $default  reduce using rule 46 (statement)


State 124

   45 statement: expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_LogicalAnd     shift, and go to state 54
    T_LogicalOr      shift, and go to state 55
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    $default  reduce using rule 45 (statement)


State 125

   74 expr_without_constants: expr T_plus expr .
   90 expr: expr . T_plus expr
   90     | expr T_plus expr .
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 74 (expr_without_constants)
    T_Semicolon          reduce using rule 74 (expr_without_constants)
    $default             reduce using rule 90 (expr)


State 126

   75 expr_without_constants: expr T_minus expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   91     | expr T_minus expr .
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 75 (expr_without_constants)
    T_Semicolon          reduce using rule 75 (expr_without_constants)
    $default             reduce using rule 91 (expr)


State 127

   78 expr_without_constants: expr T_mod expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   94     | expr T_mod expr .
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 78 (expr_without_constants)
    T_Semicolon          reduce using rule 78 (expr_without_constants)
    $default             reduce using rule 94 (expr)


State 128

   76 expr_without_constants: expr T_divide expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   92     | expr T_divide expr .
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 76 (expr_without_constants)
    T_Semicolon          reduce using rule 76 (expr_without_constants)
    $default             reduce using rule 92 (expr)


State 129

   77 expr_without_constants: expr T_multiply expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   93     | expr T_multiply expr .
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_closedParanthesis  reduce using rule 77 (expr_without_constants)
    T_Semicolon          reduce using rule 77 (expr_without_constants)
    $default             reduce using rule 93 (expr)


State 130

   79 expr_without_constants: expr T_LogicalAnd expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   95     | expr T_LogicalAnd expr .
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    T_LogicalAnd  reduce using rule 95 (expr)
    T_LogicalOr   reduce using rule 95 (expr)
    $default      reduce using rule 79 (expr_without_constants)


State 131

   80 expr_without_constants: expr T_LogicalOr expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   96     | expr T_LogicalOr expr .
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61

    T_LogicalAnd  reduce using rule 96 (expr)
    T_LogicalOr   reduce using rule 96 (expr)
    $default      reduce using rule 80 (expr_without_constants)


State 132

   81 expr_without_constants: expr T_less expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   97     | expr T_less expr .
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 81 (expr_without_constants)
    T_Semicolon          reduce using rule 81 (expr_without_constants)
    $default             reduce using rule 97 (expr)


State 133

   82 expr_without_constants: expr T_less_equal expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   98     | expr T_less_equal expr .
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 82 (expr_without_constants)
    T_Semicolon          reduce using rule 82 (expr_without_constants)
    $default             reduce using rule 98 (expr)


State 134

   83 expr_without_constants: expr T_greater expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
   99     | expr T_greater expr .
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 83 (expr_without_constants)
    T_Semicolon          reduce using rule 83 (expr_without_constants)
    $default             reduce using rule 99 (expr)


State 135

   84 expr_without_constants: expr T_greater_equal expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  100     | expr T_greater_equal expr .
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 84 (expr_without_constants)
    T_Semicolon          reduce using rule 84 (expr_without_constants)
    $default             reduce using rule 100 (expr)


State 136

   85 expr_without_constants: expr T_equal_equal expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  101     | expr T_equal_equal expr .
  102     | expr . T_not_equal expr

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 85 (expr_without_constants)
    T_Semicolon          reduce using rule 85 (expr_without_constants)
    $default             reduce using rule 101 (expr)


State 137

   86 expr_without_constants: expr T_not_equal expr .
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr
  102     | expr T_not_equal expr .

    T_plus      shift, and go to state 49
    T_minus     shift, and go to state 50
    T_mod       shift, and go to state 51
    T_divide    shift, and go to state 52
    T_multiply  shift, and go to state 53

    T_closedParanthesis  reduce using rule 86 (expr_without_constants)
    T_Semicolon          reduce using rule 86 (expr_without_constants)
    $default             reduce using rule 102 (expr)


State 138

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment $@2 . expr_or_empty_with_assignment_and_closed_parent $@3 block

    T_type              shift, and go to state 17
    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    $default  reduce using rule 116 (expr_or_empty)

    Assignment_stmt                                  go to state 151
    expr                                             go to state 66
    expr_or_empty_with_assignment_and_closed_parent  go to state 152
    idid                                             go to state 34
    sc                                               go to state 35
    nc                                               go to state 36
    expr_or_empty                                    go to state 153


State 139

   11 block: T_Semicolon .

    $default  reduce using rule 11 (block)


State 140

   29 if_stmt: T_if T_openParenthesis expr T_closedParanthesis $@6 block . elseif_else_empty

    T_else  shift, and go to state 154

    T_else    [reduce using rule 36 (elseif_else_empty)]
    $default  reduce using rule 36 (elseif_else_empty)

    elseif_else_empty  go to state 155


State 141

   10 block: stmt .

    $default  reduce using rule 10 (block)


State 142

    9 block: openflower . block_end_flower

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25

    block_end_flower  go to state 156
    stmt              go to state 27
    for_stmt          go to state 28
    while_stmt        go to state 29
    if_stmt           go to state 30
    switch_stmt       go to state 31
    Assignment_stmt   go to state 32
    expr              go to state 33
    idid              go to state 34
    sc                go to state 35
    nc                go to state 36
    closeflower       go to state 37


State 143

   27 while_stmt: T_while $@4 T_openParenthesis expr T_closedParanthesis $@5 . block

    error                shift, and go to state 16
    T_type               shift, and go to state 17
    T_for                shift, and go to state 18
    T_if                 shift, and go to state 19
    T_while              shift, and go to state 20
    T_openFlowerBracket  shift, and go to state 13
    T_Semicolon          shift, and go to state 139
    T_identifier         shift, and go to state 22
    T_numericConstants   shift, and go to state 23
    T_stringLiteral      shift, and go to state 24
    T_switch             shift, and go to state 25

    block            go to state 157
    stmt             go to state 141
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    openflower       go to state 142


State 144

   52 cases: T_Semicolon .

    $default  reduce using rule 52 (cases)


State 145

   51 cases: T_case . caseval

    T_identifier        shift, and go to state 158
    T_numericConstants  shift, and go to state 159
    T_stringLiteral     shift, and go to state 160
    T_floatVal          shift, and go to state 161
    T_character         shift, and go to state 162

    caseval  go to state 163
    LIT      go to state 164


State 146

   54 cases: T_default . T_colon defcasec

    T_colon  shift, and go to state 165


State 147

   53 cases: statement . T_Semicolon

    T_Semicolon  shift, and go to state 166


State 148

   48 switch_body: T_openFlowerBracket cases . T_closedFlowerBracket

    T_closedFlowerBracket  shift, and go to state 167


State 149

   71 print: T_cout T_OutputStream . T_stringLiteral
   72      | T_cout T_OutputStream . T_stringLiteral T_OutputStream T_endl

    T_stringLiteral  shift, and go to state 168


State 150

   50 switch_body: statement T_Semicolon .

    $default  reduce using rule 50 (switch_body)


State 151

  111 expr_or_empty_with_assignment_and_closed_parent: Assignment_stmt . T_closedParanthesis

    T_closedParanthesis  shift, and go to state 169


State 152

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent . $@3 block

    $default  reduce using rule 23 ($@3)

    $@3  go to state 170


State 153

  110 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty . T_closedParanthesis

    T_closedParanthesis  shift, and go to state 171


State 154

   31 elseif_else_empty: T_else . T_if T_openParenthesis expr T_closedParanthesis $@7 block elseif_else_empty
   33                  | T_else . $@8 Multiple_stmts_not_if
   35                  | T_else . $@9 openflower block_end_flower

    T_if  shift, and go to state 172

    T_openFlowerBracket  reduce using rule 34 ($@9)
    $default             reduce using rule 32 ($@8)

    $@8  go to state 173
    $@9  go to state 174


State 155

   29 if_stmt: T_if T_openParenthesis expr T_closedParanthesis $@6 block elseif_else_empty .

    $default  reduce using rule 29 (if_stmt)


State 156

    9 block: openflower block_end_flower .

    $default  reduce using rule 9 (block)


State 157

   27 while_stmt: T_while $@4 T_openParenthesis expr T_closedParanthesis $@5 block .

    $default  reduce using rule 27 (while_stmt)


State 158

  103 LIT: T_identifier .

    $default  reduce using rule 103 (LIT)


State 159

  104 LIT: T_numericConstants .

    $default  reduce using rule 104 (LIT)


State 160

  106 LIT: T_stringLiteral .

    $default  reduce using rule 106 (LIT)


State 161

  105 LIT: T_floatVal .

    $default  reduce using rule 105 (LIT)


State 162

  107 LIT: T_character .

    $default  reduce using rule 107 (LIT)


State 163

   51 cases: T_case caseval .

    $default  reduce using rule 51 (cases)


State 164

   56 caseval: LIT . T_colon casec

    T_colon  shift, and go to state 175


State 165

   54 cases: T_default T_colon . defcasec

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25
    T_case                 shift, and go to state 176

    Multiple_stmts   go to state 177
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    defcasec         go to state 178
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 166

   53 cases: statement T_Semicolon .

    $default  reduce using rule 53 (cases)


State 167

   48 switch_body: T_openFlowerBracket cases T_closedFlowerBracket .

    $default  reduce using rule 48 (switch_body)


State 168

   71 print: T_cout T_OutputStream T_stringLiteral .
   72      | T_cout T_OutputStream T_stringLiteral . T_OutputStream T_endl

    T_OutputStream  shift, and go to state 179

    $default  reduce using rule 71 (print)


State 169

  111 expr_or_empty_with_assignment_and_closed_parent: Assignment_stmt T_closedParanthesis .

    $default  reduce using rule 111 (expr_or_empty_with_assignment_and_closed_parent)


State 170

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent $@3 . block

    error                shift, and go to state 16
    T_type               shift, and go to state 17
    T_for                shift, and go to state 18
    T_if                 shift, and go to state 19
    T_while              shift, and go to state 20
    T_openFlowerBracket  shift, and go to state 13
    T_Semicolon          shift, and go to state 139
    T_identifier         shift, and go to state 22
    T_numericConstants   shift, and go to state 23
    T_stringLiteral      shift, and go to state 24
    T_switch             shift, and go to state 25

    block            go to state 180
    stmt             go to state 141
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    openflower       go to state 142


State 171

  110 expr_or_empty_with_assignment_and_closed_parent: expr_or_empty T_closedParanthesis .

    $default  reduce using rule 110 (expr_or_empty_with_assignment_and_closed_parent)


State 172

   31 elseif_else_empty: T_else T_if . T_openParenthesis expr T_closedParanthesis $@7 block elseif_else_empty

    T_openParenthesis  shift, and go to state 181


State 173

   33 elseif_else_empty: T_else $@8 . Multiple_stmts_not_if

    T_type              shift, and go to state 17
    T_for               shift, and go to state 18
    T_while             shift, and go to state 20
    T_Semicolon         shift, and go to state 182
    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    for_stmt               go to state 183
    while_stmt             go to state 184
    Multiple_stmts_not_if  go to state 185
    stmt_without_if        go to state 186
    Assignment_stmt        go to state 187
    expr                   go to state 188
    idid                   go to state 34
    sc                     go to state 35
    nc                     go to state 36


State 174

   35 elseif_else_empty: T_else $@9 . openflower block_end_flower

    T_openFlowerBracket  shift, and go to state 13

    openflower  go to state 189


State 175

   56 caseval: LIT T_colon . casec

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25
    T_case                 shift, and go to state 190
    T_default              shift, and go to state 191

    Multiple_stmts   go to state 192
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    casec            go to state 193
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 176

   64 defcasec: T_case . defcaseval

    T_identifier        shift, and go to state 158
    T_numericConstants  shift, and go to state 159
    T_stringLiteral     shift, and go to state 160
    T_floatVal          shift, and go to state 161
    T_character         shift, and go to state 162

    defcaseval  go to state 194
    LIT         go to state 195


State 177

   63 defcasec: Multiple_stmts .
   65         | Multiple_stmts . T_case defcaseval

    T_case  shift, and go to state 196

    $default  reduce using rule 63 (defcasec)


State 178

   54 cases: T_default T_colon defcasec .

    $default  reduce using rule 54 (cases)


State 179

   72 print: T_cout T_OutputStream T_stringLiteral T_OutputStream . T_endl

    T_endl  shift, and go to state 197


State 180

   24 for_stmt: T_for T_openParenthesis expr_or_empty_with_semicolon_and_assignment $@1 expr_or_empty_with_semicolon_and_assignment $@2 expr_or_empty_with_assignment_and_closed_parent $@3 block .

    $default  reduce using rule 24 (for_stmt)


State 181

   31 elseif_else_empty: T_else T_if T_openParenthesis . expr T_closedParanthesis $@7 block elseif_else_empty

    T_identifier        shift, and go to state 22
    T_numericConstants  shift, and go to state 23
    T_stringLiteral     shift, and go to state 24

    expr  go to state 198
    idid  go to state 70
    sc    go to state 35
    nc    go to state 36


State 182

   38 Multiple_stmts_not_if: T_Semicolon .

    $default  reduce using rule 38 (Multiple_stmts_not_if)


State 183

   42 stmt_without_if: for_stmt .

    $default  reduce using rule 42 (stmt_without_if)


State 184

   41 stmt_without_if: while_stmt .

    $default  reduce using rule 41 (stmt_without_if)


State 185

   33 elseif_else_empty: T_else $@8 Multiple_stmts_not_if .

    $default  reduce using rule 33 (elseif_else_empty)


State 186

   37 Multiple_stmts_not_if: stmt_without_if . Multiple_stmts

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25

    Multiple_stmts   go to state 199
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 187

   40 stmt_without_if: Assignment_stmt . T_Semicolon

    T_Semicolon  shift, and go to state 200


State 188

   39 stmt_without_if: expr . T_Semicolon
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_Semicolon      shift, and go to state 201
    T_plus           shift, and go to state 49
    T_minus          shift, and go to state 50
    T_mod            shift, and go to state 51
    T_divide         shift, and go to state 52
    T_multiply       shift, and go to state 53
    T_LogicalAnd     shift, and go to state 54
    T_LogicalOr      shift, and go to state 55
    T_less           shift, and go to state 56
    T_less_equal     shift, and go to state 57
    T_greater        shift, and go to state 58
    T_greater_equal  shift, and go to state 59
    T_equal_equal    shift, and go to state 60
    T_not_equal      shift, and go to state 61


State 189

   35 elseif_else_empty: T_else $@9 openflower . block_end_flower

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25

    block_end_flower  go to state 202
    stmt              go to state 27
    for_stmt          go to state 28
    while_stmt        go to state 29
    if_stmt           go to state 30
    switch_stmt       go to state 31
    Assignment_stmt   go to state 32
    expr              go to state 33
    idid              go to state 34
    sc                go to state 35
    nc                go to state 36
    closeflower       go to state 37


State 190

   58 casec: T_case . caseval

    T_identifier        shift, and go to state 158
    T_numericConstants  shift, and go to state 159
    T_stringLiteral     shift, and go to state 160
    T_floatVal          shift, and go to state 161
    T_character         shift, and go to state 162

    caseval  go to state 203
    LIT      go to state 164


State 191

   60 casec: T_default . T_colon defcasec

    T_colon  shift, and go to state 204


State 192

   57 casec: Multiple_stmts .
   59      | Multiple_stmts . T_case caseval
   61      | Multiple_stmts . T_default T_colon defcasec

    T_case     shift, and go to state 205
    T_default  shift, and go to state 206

    $default  reduce using rule 57 (casec)


State 193

   56 caseval: LIT T_colon casec .

    $default  reduce using rule 56 (caseval)


State 194

   64 defcasec: T_case defcaseval .

    $default  reduce using rule 64 (defcasec)


State 195

   62 defcaseval: LIT . T_colon defcasec

    T_colon  shift, and go to state 207


State 196

   65 defcasec: Multiple_stmts T_case . defcaseval

    T_identifier        shift, and go to state 158
    T_numericConstants  shift, and go to state 159
    T_stringLiteral     shift, and go to state 160
    T_floatVal          shift, and go to state 161
    T_character         shift, and go to state 162

    defcaseval  go to state 208
    LIT         go to state 195


State 197

   72 print: T_cout T_OutputStream T_stringLiteral T_OutputStream T_endl .

    $default  reduce using rule 72 (print)


State 198

   31 elseif_else_empty: T_else T_if T_openParenthesis expr . T_closedParanthesis $@7 block elseif_else_empty
   90 expr: expr . T_plus expr
   91     | expr . T_minus expr
   92     | expr . T_divide expr
   93     | expr . T_multiply expr
   94     | expr . T_mod expr
   95     | expr . T_LogicalAnd expr
   96     | expr . T_LogicalOr expr
   97     | expr . T_less expr
   98     | expr . T_less_equal expr
   99     | expr . T_greater expr
  100     | expr . T_greater_equal expr
  101     | expr . T_equal_equal expr
  102     | expr . T_not_equal expr

    T_closedParanthesis  shift, and go to state 209
    T_plus               shift, and go to state 49
    T_minus              shift, and go to state 50
    T_mod                shift, and go to state 51
    T_divide             shift, and go to state 52
    T_multiply           shift, and go to state 53
    T_LogicalAnd         shift, and go to state 54
    T_LogicalOr          shift, and go to state 55
    T_less               shift, and go to state 56
    T_less_equal         shift, and go to state 57
    T_greater            shift, and go to state 58
    T_greater_equal      shift, and go to state 59
    T_equal_equal        shift, and go to state 60
    T_not_equal          shift, and go to state 61


State 199

   37 Multiple_stmts_not_if: stmt_without_if Multiple_stmts .

    $default  reduce using rule 37 (Multiple_stmts_not_if)


State 200

   40 stmt_without_if: Assignment_stmt T_Semicolon .

    $default  reduce using rule 40 (stmt_without_if)


State 201

   39 stmt_without_if: expr T_Semicolon .

    $default  reduce using rule 39 (stmt_without_if)


State 202

   35 elseif_else_empty: T_else $@9 openflower block_end_flower .

    $default  reduce using rule 35 (elseif_else_empty)


State 203

   58 casec: T_case caseval .

    $default  reduce using rule 58 (casec)


State 204

   60 casec: T_default T_colon . defcasec

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25
    T_case                 shift, and go to state 176

    Multiple_stmts   go to state 177
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    defcasec         go to state 210
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 205

   59 casec: Multiple_stmts T_case . caseval

    T_identifier        shift, and go to state 158
    T_numericConstants  shift, and go to state 159
    T_stringLiteral     shift, and go to state 160
    T_floatVal          shift, and go to state 161
    T_character         shift, and go to state 162

    caseval  go to state 211
    LIT      go to state 164


State 206

   61 casec: Multiple_stmts T_default . T_colon defcasec

    T_colon  shift, and go to state 212


State 207

   62 defcaseval: LIT T_colon . defcasec

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25
    T_case                 shift, and go to state 176

    Multiple_stmts   go to state 177
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    defcasec         go to state 213
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 208

   65 defcasec: Multiple_stmts T_case defcaseval .

    $default  reduce using rule 65 (defcasec)


State 209

   31 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis . $@7 block elseif_else_empty

    $default  reduce using rule 30 ($@7)

    $@7  go to state 214


State 210

   60 casec: T_default T_colon defcasec .

    $default  reduce using rule 60 (casec)


State 211

   59 casec: Multiple_stmts T_case caseval .

    $default  reduce using rule 59 (casec)


State 212

   61 casec: Multiple_stmts T_default T_colon . defcasec

    error                  shift, and go to state 16
    T_type                 shift, and go to state 17
    T_for                  shift, and go to state 18
    T_if                   shift, and go to state 19
    T_while                shift, and go to state 20
    T_closedFlowerBracket  shift, and go to state 21
    T_identifier           shift, and go to state 22
    T_numericConstants     shift, and go to state 23
    T_stringLiteral        shift, and go to state 24
    T_switch               shift, and go to state 25
    T_case                 shift, and go to state 176

    Multiple_stmts   go to state 177
    stmt             go to state 45
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    defcasec         go to state 215
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    closeflower      go to state 46


State 213

   62 defcaseval: LIT T_colon defcasec .

    $default  reduce using rule 62 (defcaseval)


State 214

   31 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis $@7 . block elseif_else_empty

    error                shift, and go to state 16
    T_type               shift, and go to state 17
    T_for                shift, and go to state 18
    T_if                 shift, and go to state 19
    T_while              shift, and go to state 20
    T_openFlowerBracket  shift, and go to state 13
    T_Semicolon          shift, and go to state 139
    T_identifier         shift, and go to state 22
    T_numericConstants   shift, and go to state 23
    T_stringLiteral      shift, and go to state 24
    T_switch             shift, and go to state 25

    block            go to state 216
    stmt             go to state 141
    for_stmt         go to state 28
    while_stmt       go to state 29
    if_stmt          go to state 30
    switch_stmt      go to state 31
    Assignment_stmt  go to state 32
    expr             go to state 33
    idid             go to state 34
    sc               go to state 35
    nc               go to state 36
    openflower       go to state 142


State 215

   61 casec: Multiple_stmts T_default T_colon defcasec .

    $default  reduce using rule 61 (casec)


State 216

   31 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis $@7 block . elseif_else_empty

    T_else  shift, and go to state 154

    T_else    [reduce using rule 36 (elseif_else_empty)]
    $default  reduce using rule 36 (elseif_else_empty)

    elseif_else_empty  go to state 217


State 217

   31 elseif_else_empty: T_else T_if T_openParenthesis expr T_closedParanthesis $@7 block elseif_else_empty .

    $default  reduce using rule 31 (elseif_else_empty)
